{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  isLoading: true,\n  fetchResult: {\n    name: \"\",\n    avatarUrl: \"\",\n    token: \"\"\n  },\n  errors: null\n};\nexport const fetchsignUp = createAsyncThunk(\"app/signUp\", async data => {\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(data)\n  };\n  const response = await fetch(\"http://dev.trainee.dex-it.ru/api/Auth/SignUp\", requestOptions);\n  const result = await response.json();\n\n  if (result.token) {\n    localStorage.setItem(\"token\", result.token);\n  }\n\n  return result;\n});\nconst signUpSlice = createSlice({\n  name: \"signUp\",\n  initialState,\n  reducers: {\n    reset: state => initialState\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchsignUp.pending, state => {\n      state.isLoading = true;\n    });\n    builder.addCase(fetchsignUp.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.fetchResult = action.payload;\n    });\n    builder.addCase(fetchsignUp.rejected, (state, action) => {\n      state.isLoading = false;\n      state.errors = action.error;\n    });\n  }\n});\nexport const selectsignUpResult = state => state.signUp.fetchResult;\nexport const selectsignUpIsLoading = state => state.signUp.isLoading;\nexport const selectsignUpIsError = state => state.signUp.errors;\nexport const signUpReducer = signUpSlice.reducer;","map":{"version":3,"sources":["D:/study/dex-test/src/store/signUpSlice.ts"],"names":["createAsyncThunk","createSlice","initialState","isLoading","fetchResult","name","avatarUrl","token","errors","fetchsignUp","data","requestOptions","method","headers","body","JSON","stringify","response","fetch","result","json","localStorage","setItem","signUpSlice","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","error","selectsignUpResult","signUp","selectsignUpIsLoading","selectsignUpIsError","signUpReducer","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AAQA,MAAMC,YAA0B,GAAG;AACjCC,EAAAA,SAAS,EAAE,IADsB;AAEjCC,EAAAA,WAAW,EAAE;AACXC,IAAAA,IAAI,EAAE,EADK;AAEXC,IAAAA,SAAS,EAAE,EAFA;AAGXC,IAAAA,KAAK,EAAE;AAHI,GAFoB;AAOjCC,EAAAA,MAAM,EAAE;AAPyB,CAAnC;AAUA,OAAO,MAAMC,WAAW,GAAGT,gBAAgB,CACzC,YADyC,EAEzC,MAAOU,IAAP,IAAgB;AACd,QAAMC,cAAc,GAAG;AACrBC,IAAAA,MAAM,EAAE,MADa;AAErBC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAFY;AAKrBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,IAAf;AALe,GAAvB;AAOA,QAAMO,QAAQ,GAAG,MAAMC,KAAK,CAC1B,8CAD0B,EAE1BP,cAF0B,CAA5B;AAIA,QAAMQ,MAAM,GAAI,MAAMF,QAAQ,CAACG,IAAT,EAAtB;;AACA,MAAID,MAAM,CAACZ,KAAX,EAAkB;AAChBc,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BH,MAAM,CAACZ,KAArC;AACD;;AACD,SAAOY,MAAP;AACD,CAnBwC,CAApC;AAsBP,MAAMI,WAAW,GAAGtB,WAAW,CAAC;AAC9BI,EAAAA,IAAI,EAAE,QADwB;AAE9BH,EAAAA,YAF8B;AAG9BsB,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAGC,KAAD,IAAWxB;AADV,GAHoB;AAM9ByB,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CAACC,OAAR,CAAgBpB,WAAW,CAACqB,OAA5B,EAAsCJ,KAAD,IAAW;AAC9CA,MAAAA,KAAK,CAACvB,SAAN,GAAkB,IAAlB;AACD,KAFD;AAGAyB,IAAAA,OAAO,CAACC,OAAR,CAAgBpB,WAAW,CAACsB,SAA5B,EAAuC,CAACL,KAAD,EAAQM,MAAR,KAAmB;AACxDN,MAAAA,KAAK,CAACvB,SAAN,GAAkB,KAAlB;AACAuB,MAAAA,KAAK,CAACtB,WAAN,GAAoB4B,MAAM,CAACC,OAA3B;AACD,KAHD;AAIAL,IAAAA,OAAO,CAACC,OAAR,CAAgBpB,WAAW,CAACyB,QAA5B,EAAsC,CAACR,KAAD,EAAQM,MAAR,KAAmB;AACvDN,MAAAA,KAAK,CAACvB,SAAN,GAAkB,KAAlB;AACAuB,MAAAA,KAAK,CAAClB,MAAN,GAAewB,MAAM,CAACG,KAAtB;AACD,KAHD;AAID;AAlB6B,CAAD,CAA/B;AAqBA,OAAO,MAAMC,kBAAkB,GAAIV,KAAD,IAChCA,KAAK,CAACW,MAAN,CAAajC,WADR;AAEP,OAAO,MAAMkC,qBAAqB,GAAIZ,KAAD,IACnCA,KAAK,CAACW,MAAN,CAAalC,SADR;AAEP,OAAO,MAAMoC,mBAAmB,GAAIb,KAAD,IAAsBA,KAAK,CAACW,MAAN,CAAa7B,MAA/D;AAEP,OAAO,MAAMgC,aAAa,GAAGjB,WAAW,CAACkB,OAAlC","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport {\r\n  ISignUpState,\r\n  ISignUpRequest,\r\n  ISignUpResult,\r\n} from \"../Interfaces/interfaces\";\r\nimport { RootState } from \"./store\";\r\n\r\nconst initialState: ISignUpState = {\r\n  isLoading: true,\r\n  fetchResult: {\r\n    name: \"\",\r\n    avatarUrl: \"\",\r\n    token: \"\",\r\n  },\r\n  errors: null,\r\n};\r\n\r\nexport const fetchsignUp = createAsyncThunk<any, ISignUpRequest>(\r\n  \"app/signUp\",\r\n  async (data) => {\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(data),\r\n    };\r\n    const response = await fetch(\r\n      \"http://dev.trainee.dex-it.ru/api/Auth/SignUp\",\r\n      requestOptions\r\n    );\r\n    const result = (await response.json()) as ISignUpResult;\r\n    if (result.token) {\r\n      localStorage.setItem(\"token\", result.token);\r\n    }\r\n    return result;\r\n  }\r\n);\r\n\r\nconst signUpSlice = createSlice({\r\n  name: \"signUp\",\r\n  initialState,\r\n  reducers: {\r\n    reset: (state) => initialState,\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchsignUp.pending, (state) => {\r\n      state.isLoading = true;\r\n    });\r\n    builder.addCase(fetchsignUp.fulfilled, (state, action) => {\r\n      state.isLoading = false;\r\n      state.fetchResult = action.payload;\r\n    });\r\n    builder.addCase(fetchsignUp.rejected, (state, action) => {\r\n      state.isLoading = false;\r\n      state.errors = action.error;\r\n    });\r\n  },\r\n});\r\n\r\nexport const selectsignUpResult = (state: RootState) =>\r\n  state.signUp.fetchResult;\r\nexport const selectsignUpIsLoading = (state: RootState) =>\r\n  state.signUp.isLoading;\r\nexport const selectsignUpIsError = (state: RootState) => state.signUp.errors;\r\n\r\nexport const signUpReducer = signUpSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}