{"ast":null,"code":"var _jsxFileName = \"D:\\\\study\\\\dex-test\\\\src\\\\components\\\\inputGroup\\\\iInputGroup.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport s from \"./style.module.css\";\nimport cn from \"classnames\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const InputGroup = ({\n  label,\n  type = \"text\",\n  inputName,\n  errorText,\n  register,\n  required,\n  isRequired = true,\n  errors,\n  imageUrl\n}) => {\n  _s();\n\n  const [showPwd, setShowPwd] = useState(false);\n  const [inputType, setInputType] = useState(type);\n\n  const handleClick = event => {\n    event.preventDefault();\n    setShowPwd(prevState => !prevState);\n\n    if (inputType === \"password\") {\n      setInputType(\"text\");\n    }\n\n    if (inputType === \"text\") {\n      setInputType(\"password\");\n    }\n  };\n\n  const reg = isRequired ? register({\n    required\n  }) : register({});\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: cn(s.inputGroup, {\n      [s.showPwd]: showPwd\n    }),\n    children: [type === \"file\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: s.fileLabel,\n        htmlFor: inputName,\n        style: {\n          backgroundImage: `url(${imageUrl})`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: s.input,\n        type: inputType,\n        name: inputName,\n        id: inputName,\n        accept: \"image/*\",\n        ref: reg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: s.label,\n        htmlFor: inputName,\n        children: label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: s.input,\n        type: inputType,\n        name: inputName,\n        id: inputName,\n        ref: register({\n          required\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true), inputName === \"checkPassword\" ? /*#__PURE__*/_jsxDEV(\"span\", {\n      className: s.showPassword,\n      onClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this) : inputName === \"password\" ? /*#__PURE__*/_jsxDEV(\"span\", {\n      className: s.showPassword,\n      onClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this) : \"\", errors[inputName] && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: s.error,\n      children: errorText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n\n_s(InputGroup, \"9a1fNzZt1FpkPlHh/bcnTlHKmc0=\");\n\n_c = InputGroup;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputGroup\");","map":{"version":3,"sources":["D:/study/dex-test/src/components/inputGroup/iInputGroup.tsx"],"names":["React","useState","s","cn","InputGroup","label","type","inputName","errorText","register","required","isRequired","errors","imageUrl","showPwd","setShowPwd","inputType","setInputType","handleClick","event","preventDefault","prevState","reg","inputGroup","fileLabel","backgroundImage","input","showPassword","error"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAGA,OAAOC,CAAP,MAAc,oBAAd;AACA,OAAOC,EAAP,MAAe,YAAf;;;AAEA,OAAO,MAAMC,UAAgC,GAAG,CAAC;AAC/CC,EAAAA,KAD+C;AAE/CC,EAAAA,IAAI,GAAG,MAFwC;AAG/CC,EAAAA,SAH+C;AAI/CC,EAAAA,SAJ+C;AAK/CC,EAAAA,QAL+C;AAM/CC,EAAAA,QAN+C;AAO/CC,EAAAA,UAAU,GAAG,IAPkC;AAQ/CC,EAAAA,MAR+C;AAS/CC,EAAAA;AAT+C,CAAD,KAU1C;AAAA;;AACJ,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAU,KAAV,CAAtC;AACA,QAAM,CAACe,SAAD,EAAYC,YAAZ,IAA4BhB,QAAQ,CAASK,IAAT,CAA1C;;AACA,QAAMY,WAAW,GAAIC,KAAD,IAAgD;AAClEA,IAAAA,KAAK,CAACC,cAAN;AACAL,IAAAA,UAAU,CAAEM,SAAD,IAAe,CAACA,SAAjB,CAAV;;AACA,QAAIL,SAAS,KAAK,UAAlB,EAA8B;AAC5BC,MAAAA,YAAY,CAAC,MAAD,CAAZ;AACD;;AACD,QAAID,SAAS,KAAK,MAAlB,EAA0B;AACxBC,MAAAA,YAAY,CAAC,UAAD,CAAZ;AACD;AACF,GATD;;AAWA,QAAMK,GAAG,GAAGX,UAAU,GAAGF,QAAQ,CAAC;AAAEC,IAAAA;AAAF,GAAD,CAAX,GAA4BD,QAAQ,CAAC,EAAD,CAA1D;AAEA,sBACE;AAAK,IAAA,SAAS,EAAEN,EAAE,CAACD,CAAC,CAACqB,UAAH,EAAe;AAAE,OAACrB,CAAC,CAACY,OAAH,GAAaA;AAAf,KAAf,CAAlB;AAAA,eACGR,IAAI,KAAK,MAAT,gBACC;AAAA,8BACE;AACE,QAAA,SAAS,EAAEJ,CAAC,CAACsB,SADf;AAEE,QAAA,OAAO,EAAEjB,SAFX;AAGE,QAAA,KAAK,EAAE;AACLkB,UAAAA,eAAe,EAAG,OAAMZ,QAAS;AAD5B;AAHT;AAAA;AAAA;AAAA;AAAA,cADF,eAQE;AACE,QAAA,SAAS,EAAEX,CAAC,CAACwB,KADf;AAEE,QAAA,IAAI,EAAEV,SAFR;AAGE,QAAA,IAAI,EAAET,SAHR;AAIE,QAAA,EAAE,EAAEA,SAJN;AAKE,QAAA,MAAM,EAAC,SALT;AAME,QAAA,GAAG,EAAEe;AANP;AAAA;AAAA;AAAA;AAAA,cARF;AAAA,oBADD,gBAmBC;AAAA,8BACE;AAAO,QAAA,SAAS,EAAEpB,CAAC,CAACG,KAApB;AAA2B,QAAA,OAAO,EAAEE,SAApC;AAAA,kBACGF;AADH;AAAA;AAAA;AAAA;AAAA,cADF,eAIE;AACE,QAAA,SAAS,EAAEH,CAAC,CAACwB,KADf;AAEE,QAAA,IAAI,EAAEV,SAFR;AAGE,QAAA,IAAI,EAAET,SAHR;AAIE,QAAA,EAAE,EAAEA,SAJN;AAKE,QAAA,GAAG,EAAEE,QAAQ,CAAC;AAAEC,UAAAA;AAAF,SAAD;AALf;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA,oBApBJ,EAiCGH,SAAS,KAAK,eAAd,gBACC;AAAM,MAAA,SAAS,EAAEL,CAAC,CAACyB,YAAnB;AAAiC,MAAA,OAAO,EAAET;AAA1C;AAAA;AAAA;AAAA;AAAA,YADD,GAEGX,SAAS,KAAK,UAAd,gBACF;AAAM,MAAA,SAAS,EAAEL,CAAC,CAACyB,YAAnB;AAAiC,MAAA,OAAO,EAAET;AAA1C;AAAA;AAAA;AAAA;AAAA,YADE,GAGF,EAtCJ,EAwCGN,MAAM,CAACL,SAAD,CAAN,iBAAqB;AAAK,MAAA,SAAS,EAAEL,CAAC,CAAC0B,KAAlB;AAAA,gBAA0BpB;AAA1B;AAAA;AAAA;AAAA;AAAA,YAxCxB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA4CD,CAtEM;;GAAMJ,U;;KAAAA,U","sourcesContent":["import React, { useState } from \"react\";\r\nimport { InputProps } from \"../../api/dto/components.g\";\r\n\r\nimport s from \"./style.module.css\";\r\nimport cn from \"classnames\";\r\n\r\nexport const InputGroup: React.FC<InputProps> = ({\r\n  label,\r\n  type = \"text\",\r\n  inputName,\r\n  errorText,\r\n  register,\r\n  required,\r\n  isRequired = true,\r\n  errors,\r\n  imageUrl,\r\n}) => {\r\n  const [showPwd, setShowPwd] = useState<boolean>(false);\r\n  const [inputType, setInputType] = useState<string>(type);\r\n  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    event.preventDefault();\r\n    setShowPwd((prevState) => !prevState);\r\n    if (inputType === \"password\") {\r\n      setInputType(\"text\");\r\n    }\r\n    if (inputType === \"text\") {\r\n      setInputType(\"password\");\r\n    }\r\n  };\r\n\r\n  const reg = isRequired ? register({ required }) : register({});\r\n\r\n  return (\r\n    <div className={cn(s.inputGroup, { [s.showPwd]: showPwd })}>\r\n      {type === \"file\" ? (\r\n        <>\r\n          <label\r\n            className={s.fileLabel}\r\n            htmlFor={inputName}\r\n            style={{\r\n              backgroundImage: `url(${imageUrl})`,\r\n            }}\r\n          ></label>\r\n          <input\r\n            className={s.input}\r\n            type={inputType}\r\n            name={inputName}\r\n            id={inputName}\r\n            accept=\"image/*\"\r\n            ref={reg}\r\n          />\r\n        </>\r\n      ) : (\r\n        <>\r\n          <label className={s.label} htmlFor={inputName}>\r\n            {label}\r\n          </label>\r\n          <input\r\n            className={s.input}\r\n            type={inputType}\r\n            name={inputName}\r\n            id={inputName}\r\n            ref={register({ required })}\r\n          />\r\n        </>\r\n      )}\r\n      {inputName === \"checkPassword\" ? (\r\n        <span className={s.showPassword} onClick={handleClick}></span>\r\n      ) : inputName === \"password\" ? (\r\n        <span className={s.showPassword} onClick={handleClick}></span>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      {errors[inputName] && <div className={s.error}>{errorText}</div>}\r\n    </div>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}