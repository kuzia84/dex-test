{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  isLoading: false,\n  fetchResult: [],\n  error: null\n};\nexport const fetchPlayerPositions = createAsyncThunk(\"player/fetchData\", async request => {\n  const myHeaders = new Headers({\n    \"Content-Type\": \"application/json\",\n    Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n  });\n  const requestOptions = {\n    method: \"GET\",\n    headers: myHeaders\n  };\n  const response = await fetch(request, requestOptions);\n  return await response.json();\n});\nexport const getPlayerPositionsSlice = createSlice({\n  name: \"getPlayerPositions\",\n  initialState,\n  reducers: {\n    reset: state => initialState\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchPlayerPositions.pending, state => {\n      state.isLoading = true;\n    });\n    builder.addCase(fetchPlayerPositions.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.fetchResult = action.payload;\n    });\n    builder.addCase(fetchPlayerPositions.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    });\n  }\n});\nexport const SelectPlayerPositionsData = state => state.getPlayerPositions.fetchResult;\n_c = SelectPlayerPositionsData;\nexport const SelectPlayerPositionsIsLoading = state => state.getPlayerPositions.isLoading;\n_c2 = SelectPlayerPositionsIsLoading;\nexport const SelectPlayerPositionsError = state => state.getPlayerPositions.error;\n_c3 = SelectPlayerPositionsError;\nexport default getPlayerPositionsSlice.reducer;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"SelectPlayerPositionsData\");\n$RefreshReg$(_c2, \"SelectPlayerPositionsIsLoading\");\n$RefreshReg$(_c3, \"SelectPlayerPositionsError\");","map":{"version":3,"sources":["D:/study/dex-test/src/store/getPlayerPositionsSlice.ts"],"names":["createAsyncThunk","createSlice","initialState","isLoading","fetchResult","error","fetchPlayerPositions","request","myHeaders","Headers","Authorization","localStorage","getItem","requestOptions","method","headers","response","fetch","json","getPlayerPositionsSlice","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","SelectPlayerPositionsData","getPlayerPositions","SelectPlayerPositionsIsLoading","SelectPlayerPositionsError","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AAIA,MAAMC,YAAkC,GAAG;AACzCC,EAAAA,SAAS,EAAE,KAD8B;AAEzCC,EAAAA,WAAW,EAAE,EAF4B;AAGzCC,EAAAA,KAAK,EAAE;AAHkC,CAA3C;AAMA,OAAO,MAAMC,oBAAoB,GAAGN,gBAAgB,CAClD,kBADkD,EAElD,MAAOO,OAAP,IAAmB;AACjB,QAAMC,SAAS,GAAG,IAAIC,OAAJ,CAAY;AAC5B,oBAAgB,kBADY;AAE5BC,IAAAA,aAAa,EAAG,UAASC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAA8B;AAF3B,GAAZ,CAAlB;AAIA,QAAMC,cAAc,GAAG;AACrBC,IAAAA,MAAM,EAAE,KADa;AAErBC,IAAAA,OAAO,EAAEP;AAFY,GAAvB;AAIA,QAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAACV,OAAD,EAAUM,cAAV,CAA5B;AACA,SAAQ,MAAMG,QAAQ,CAACE,IAAT,EAAd;AACD,CAbiD,CAA7C;AAgBP,OAAO,MAAMC,uBAAuB,GAAGlB,WAAW,CAAC;AACjDmB,EAAAA,IAAI,EAAE,oBAD2C;AAEjDlB,EAAAA,YAFiD;AAGjDmB,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAGC,KAAD,IAAWrB;AADV,GAHuC;AAMjDsB,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CAACC,OAAR,CAAgBpB,oBAAoB,CAACqB,OAArC,EAA+CJ,KAAD,IAAW;AACvDA,MAAAA,KAAK,CAACpB,SAAN,GAAkB,IAAlB;AACD,KAFD;AAGAsB,IAAAA,OAAO,CAACC,OAAR,CAAgBpB,oBAAoB,CAACsB,SAArC,EAAgD,CAACL,KAAD,EAAQM,MAAR,KAAmB;AACjEN,MAAAA,KAAK,CAACpB,SAAN,GAAkB,KAAlB;AACAoB,MAAAA,KAAK,CAACnB,WAAN,GAAoByB,MAAM,CAACC,OAA3B;AACD,KAHD;AAIAL,IAAAA,OAAO,CAACC,OAAR,CAAgBpB,oBAAoB,CAACyB,QAArC,EAA+C,CAACR,KAAD,EAAQM,MAAR,KAAmB;AAChEN,MAAAA,KAAK,CAACpB,SAAN,GAAkB,KAAlB;AACAoB,MAAAA,KAAK,CAAClB,KAAN,GAAcwB,MAAM,CAACC,OAArB;AACD,KAHD;AAID;AAlBgD,CAAD,CAA3C;AAqBP,OAAO,MAAME,yBAAyB,GAAIT,KAAD,IACvCA,KAAK,CAACU,kBAAN,CAAyB7B,WADpB;KAAM4B,yB;AAEb,OAAO,MAAME,8BAA8B,GAAIX,KAAD,IAC5CA,KAAK,CAACU,kBAAN,CAAyB9B,SADpB;MAAM+B,8B;AAEb,OAAO,MAAMC,0BAA0B,GAAIZ,KAAD,IACxCA,KAAK,CAACU,kBAAN,CAAyB5B,KADpB;MAAM8B,0B;AAGb,eAAehB,uBAAuB,CAACiB,OAAvC","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport { PlayerPositionsState } from \"../Interfaces\";\r\nimport { RootState } from \"./store\";\r\n\r\nconst initialState: PlayerPositionsState = {\r\n  isLoading: false,\r\n  fetchResult: [],\r\n  error: null,\r\n};\r\n\r\nexport const fetchPlayerPositions = createAsyncThunk<any, string>(\r\n  \"player/fetchData\",\r\n  async (request) => {\r\n    const myHeaders = new Headers({\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n    });\r\n    const requestOptions = {\r\n      method: \"GET\",\r\n      headers: myHeaders,\r\n    };\r\n    const response = await fetch(request, requestOptions);\r\n    return (await response.json()) as string[];\r\n  }\r\n);\r\n\r\nexport const getPlayerPositionsSlice = createSlice({\r\n  name: \"getPlayerPositions\",\r\n  initialState,\r\n  reducers: {\r\n    reset: (state) => initialState,\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchPlayerPositions.pending, (state) => {\r\n      state.isLoading = true;\r\n    });\r\n    builder.addCase(fetchPlayerPositions.fulfilled, (state, action) => {\r\n      state.isLoading = false;\r\n      state.fetchResult = action.payload;\r\n    });\r\n    builder.addCase(fetchPlayerPositions.rejected, (state, action) => {\r\n      state.isLoading = false;\r\n      state.error = action.payload;\r\n    });\r\n  },\r\n});\r\n\r\nexport const SelectPlayerPositionsData = (state: RootState) =>\r\n  state.getPlayerPositions.fetchResult;\r\nexport const SelectPlayerPositionsIsLoading = (state: RootState) =>\r\n  state.getPlayerPositions.isLoading;\r\nexport const SelectPlayerPositionsError = (state: RootState) =>\r\n  state.getPlayerPositions.error;\r\n\r\nexport default getPlayerPositionsSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}