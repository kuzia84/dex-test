{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  isLoading: false,\n  fetchResult: {\n    name: \"\"\n  },\n  errors: null\n};\nexport const fetchDeleteItemById = createAsyncThunk(\"app/deleteItemById\", async request => {\n  const myHeaders = new Headers({\n    \"Content-Type\": \"application/json\",\n    Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n  });\n  const requestOptions = {\n    method: \"DELETE\",\n    headers: myHeaders\n  };\n  const response = await fetch(request, requestOptions);\n  return await response.json();\n});\nconst deleteItemByIdSlise = createSlice({\n  name: \"deleteItemById\",\n  initialState,\n  reducers: {\n    reset: state => initialState\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchDeleteItemById.pending, state => {\n      state.isLoading = true;\n    });\n    builder.addCase(fetchDeleteItemById.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.fetchResult = action.payload;\n    });\n    builder.addCase(fetchDeleteItemById.rejected, (state, action) => {\n      state.isLoading = false;\n      state.errors = action.error;\n    });\n  }\n});\nexport const SelectDeleteItemByIdResult = state => state.deleteItemById.fetchResult;\n_c = SelectDeleteItemByIdResult;\nexport const SelectDeleteItemByIdIsloading = state => state.deleteItemById.isLoading;\n_c2 = SelectDeleteItemByIdIsloading;\nexport const SelectDeleteItemByIdError = state => state.deleteItemById.errors;\n_c3 = SelectDeleteItemByIdError;\nexport const deleteItemByIdReducer = deleteItemByIdSlise.reducer;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"SelectDeleteItemByIdResult\");\n$RefreshReg$(_c2, \"SelectDeleteItemByIdIsloading\");\n$RefreshReg$(_c3, \"SelectDeleteItemByIdError\");","map":{"version":3,"sources":["D:/study/dex-test/src/store/deleteItemById.ts"],"names":["createAsyncThunk","createSlice","initialState","isLoading","fetchResult","name","errors","fetchDeleteItemById","request","myHeaders","Headers","Authorization","localStorage","getItem","requestOptions","method","headers","response","fetch","json","deleteItemByIdSlise","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","error","SelectDeleteItemByIdResult","deleteItemById","SelectDeleteItemByIdIsloading","SelectDeleteItemByIdError","deleteItemByIdReducer","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AAUA,MAAMC,YAA6B,GAAG;AACpCC,EAAAA,SAAS,EAAE,KADyB;AAEpCC,EAAAA,WAAW,EAAE;AACXC,IAAAA,IAAI,EAAE;AADK,GAFuB;AAKpCC,EAAAA,MAAM,EAAE;AAL4B,CAAtC;AAQA,OAAO,MAAMC,mBAAmB,GAAGP,gBAAgB,CACjD,oBADiD,EAEjD,MAAOQ,OAAP,IAA2B;AACzB,QAAMC,SAAS,GAAG,IAAIC,OAAJ,CAAY;AAC5B,oBAAgB,kBADY;AAE5BC,IAAAA,aAAa,EAAG,UAASC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAA8B;AAF3B,GAAZ,CAAlB;AAIA,QAAMC,cAAc,GAAG;AACrBC,IAAAA,MAAM,EAAE,QADa;AAErBC,IAAAA,OAAO,EAAEP;AAFY,GAAvB;AAIA,QAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAACV,OAAD,EAAUM,cAAV,CAA5B;AACA,SAAO,MAAMG,QAAQ,CAACE,IAAT,EAAb;AACD,CAbgD,CAA5C;AAgBP,MAAMC,mBAAmB,GAAGnB,WAAW,CAAC;AACtCI,EAAAA,IAAI,EAAE,gBADgC;AAEtCH,EAAAA,YAFsC;AAGtCmB,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAGC,KAAD,IAAWrB;AADV,GAH4B;AAMtCsB,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CAACC,OAAR,CAAgBnB,mBAAmB,CAACoB,OAApC,EAA8CJ,KAAD,IAAW;AACtDA,MAAAA,KAAK,CAACpB,SAAN,GAAkB,IAAlB;AACD,KAFD;AAGAsB,IAAAA,OAAO,CAACC,OAAR,CAAgBnB,mBAAmB,CAACqB,SAApC,EAA+C,CAACL,KAAD,EAAQM,MAAR,KAAmB;AAChEN,MAAAA,KAAK,CAACpB,SAAN,GAAkB,KAAlB;AACAoB,MAAAA,KAAK,CAACnB,WAAN,GAAoByB,MAAM,CAACC,OAA3B;AACD,KAHD;AAIAL,IAAAA,OAAO,CAACC,OAAR,CAAgBnB,mBAAmB,CAACwB,QAApC,EAA8C,CAACR,KAAD,EAAQM,MAAR,KAAmB;AAC/DN,MAAAA,KAAK,CAACpB,SAAN,GAAkB,KAAlB;AACAoB,MAAAA,KAAK,CAACjB,MAAN,GAAeuB,MAAM,CAACG,KAAtB;AACD,KAHD;AAID;AAlBqC,CAAD,CAAvC;AAqBA,OAAO,MAAMC,0BAA0B,GAAIV,KAAD,IACxCA,KAAK,CAACW,cAAN,CAAqB9B,WADhB;KAAM6B,0B;AAEb,OAAO,MAAME,6BAA6B,GAAIZ,KAAD,IAC3CA,KAAK,CAACW,cAAN,CAAqB/B,SADhB;MAAMgC,6B;AAEb,OAAO,MAAMC,yBAAyB,GAAIb,KAAD,IACvCA,KAAK,CAACW,cAAN,CAAqB5B,MADhB;MAAM8B,yB;AAGb,OAAO,MAAMC,qBAAqB,GAAEjB,mBAAmB,CAACkB,OAAjD","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport { RootState } from \"./store\";\r\n\r\ninterface IDeleteItemById {\r\n  isLoading: boolean;\r\n  fetchResult: {\r\n    name: string;\r\n  };\r\n  errors: any;\r\n}\r\nconst initialState: IDeleteItemById = {\r\n  isLoading: false,\r\n  fetchResult: {\r\n    name: \"\",\r\n  },\r\n  errors: null,\r\n};\r\n\r\nexport const fetchDeleteItemById = createAsyncThunk(\r\n  \"app/deleteItemById\",\r\n  async (request: string) => {\r\n    const myHeaders = new Headers({\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n    });\r\n    const requestOptions = {\r\n      method: \"DELETE\",\r\n      headers: myHeaders,\r\n    };\r\n    const response = await fetch(request, requestOptions);\r\n    return await response.json();\r\n  }\r\n);\r\n\r\nconst deleteItemByIdSlise = createSlice({\r\n  name: \"deleteItemById\",\r\n  initialState,\r\n  reducers: {\r\n    reset: (state) => initialState,\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchDeleteItemById.pending, (state) => {\r\n      state.isLoading = true;\r\n    });\r\n    builder.addCase(fetchDeleteItemById.fulfilled, (state, action) => {\r\n      state.isLoading = false;\r\n      state.fetchResult = action.payload;\r\n    });\r\n    builder.addCase(fetchDeleteItemById.rejected, (state, action) => {\r\n      state.isLoading = false;\r\n      state.errors = action.error;\r\n    });\r\n  },\r\n});\r\n\r\nexport const SelectDeleteItemByIdResult = (state: RootState) =>\r\n  state.deleteItemById.fetchResult;\r\nexport const SelectDeleteItemByIdIsloading = (state: RootState) =>\r\n  state.deleteItemById.isLoading;\r\nexport const SelectDeleteItemByIdError = (state: RootState) =>\r\n  state.deleteItemById.errors;\r\n\r\nexport const deleteItemByIdReducer= deleteItemByIdSlise.reducer;\r\n"]},"metadata":{},"sourceType":"module"}