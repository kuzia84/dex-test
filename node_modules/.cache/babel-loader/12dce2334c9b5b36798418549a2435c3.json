{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { fetchSignIn } from \"./authThunk\";\nconst initialState = {\n  signInIsLoading: true,\n  signInFetchResult: {\n    name: \"\",\n    avatarUrl: \"\",\n    token: \"\"\n  },\n  signInErrors: null\n};\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState,\n  reducers: {\n    reset: state => initialState\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchSignIn.pending, state => {\n      state.signInIsLoading = true;\n    });\n    builder.addCase(fetchSignIn.fulfilled, (state, action) => {\n      state.signInIsLoading = false;\n      state.signInFetchResult = action.payload;\n    });\n    builder.addCase(fetchSignIn.rejected, (state, action) => {\n      state.signInIsLoading = false;\n      state.signInErrors = action.error;\n    });\n  }\n});\nexport const authReducer = authSlice.reducer;","map":{"version":3,"sources":["D:/study/dex-test/src/modules/autorization/authSlice.ts"],"names":["createSlice","fetchSignIn","initialState","signInIsLoading","signInFetchResult","name","avatarUrl","token","signInErrors","authSlice","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","error","authReducer","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,SAASC,WAAT,QAA4B,aAA5B;AAEA,MAAMC,YAAwB,GAAG;AAC/BC,EAAAA,eAAe,EAAE,IADc;AAE/BC,EAAAA,iBAAiB,EAAE;AACjBC,IAAAA,IAAI,EAAE,EADW;AAEjBC,IAAAA,SAAS,EAAE,EAFM;AAGjBC,IAAAA,KAAK,EAAE;AAHU,GAFY;AAO/BC,EAAAA,YAAY,EAAE;AAPiB,CAAjC;AAUA,MAAMC,SAAS,GAAGT,WAAW,CAAC;AAC5BK,EAAAA,IAAI,EAAE,MADsB;AAE5BH,EAAAA,YAF4B;AAG5BQ,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAGC,KAAD,IAAWV;AADV,GAHkB;AAM5BW,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CAACC,OAAR,CAAgBd,WAAW,CAACe,OAA5B,EAAsCJ,KAAD,IAAW;AAC9CA,MAAAA,KAAK,CAACT,eAAN,GAAwB,IAAxB;AACD,KAFD;AAGAW,IAAAA,OAAO,CAACC,OAAR,CAAgBd,WAAW,CAACgB,SAA5B,EAAuC,CAACL,KAAD,EAAQM,MAAR,KAAmB;AACxDN,MAAAA,KAAK,CAACT,eAAN,GAAwB,KAAxB;AACAS,MAAAA,KAAK,CAACR,iBAAN,GAA0Bc,MAAM,CAACC,OAAjC;AACD,KAHD;AAIAL,IAAAA,OAAO,CAACC,OAAR,CAAgBd,WAAW,CAACmB,QAA5B,EAAsC,CAACR,KAAD,EAAQM,MAAR,KAAmB;AACvDN,MAAAA,KAAK,CAACT,eAAN,GAAwB,KAAxB;AACAS,MAAAA,KAAK,CAACJ,YAAN,GAAqBU,MAAM,CAACG,KAA5B;AACD,KAHD;AAID;AAlB2B,CAAD,CAA7B;AAqBA,OAAO,MAAMC,WAAW,GAAGb,SAAS,CAACc,OAA9B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { IAuthState } from \"../../api/dto/autorization.g\";\r\nimport { fetchSignIn } from \"./authThunk\";\r\n\r\nconst initialState: IAuthState = {\r\n  signInIsLoading: true,\r\n  signInFetchResult: {\r\n    name: \"\",\r\n    avatarUrl: \"\",\r\n    token: \"\",\r\n  },\r\n  signInErrors: null,\r\n};\r\n\r\nconst authSlice = createSlice({\r\n  name: \"auth\",\r\n  initialState,\r\n  reducers: {\r\n    reset: (state) => initialState,\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchSignIn.pending, (state) => {\r\n      state.signInIsLoading = true;\r\n    });\r\n    builder.addCase(fetchSignIn.fulfilled, (state, action) => {\r\n      state.signInIsLoading = false;\r\n      state.signInFetchResult = action.payload;\r\n    });\r\n    builder.addCase(fetchSignIn.rejected, (state, action) => {\r\n      state.signInIsLoading = false;\r\n      state.signInErrors = action.error;\r\n    });\r\n  },\r\n});\r\n\r\nexport const authReducer = authSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}