{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { fetchAddPlayer, fetchPlayersAsync, fetchSinglePlayerAsync, fetchUpdatePlayerById, fetchPlayerPositionsAsync } from \"./playerThunk\";\nconst initialState = {\n  addIsLoading: true,\n  addFetchResult: {},\n  addErrors: null,\n  getPositionsIsLoading: true,\n  getPositionsFetchResult: [],\n  getPositionsError: null,\n  getOnePlayerIsLoading: true,\n  getOnePlayerFetchResult: {\n    name: \"\",\n    number: 0,\n    position: \"\",\n    teamId: 0,\n    birthday: \"\",\n    height: 0,\n    weight: 0,\n    avatarUrl: \"\",\n    id: 0,\n    teamName: \"\"\n  },\n  getOnePlayerError: null,\n  getPlayersIsLoading: true,\n  getPlayersFetchResult: {\n    data: [],\n    count: 0,\n    page: 1,\n    size: 6\n  },\n  getPlayersError: null,\n  updateIsLoading: true,\n  updateFetchResult: {},\n  updateErrors: null,\n  fetchSuffixSearchText: \"\",\n  fetchSuffixPageNumber: 1,\n  fetchSuffixPageSize: 6,\n  fetchSuffixTeamIds: \"\"\n};\nconst playerSlice = createSlice({\n  name: \"player\",\n  initialState,\n  reducers: {\n    reset: state => initialState\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchAddPlayer.pending, state => {\n      state.addIsLoading = true;\n    });\n    builder.addCase(fetchAddPlayer.fulfilled, (state, action) => {\n      state.addIsLoading = false;\n      state.addFetchResult = action.payload;\n    });\n    builder.addCase(fetchAddPlayer.rejected, (state, action) => {\n      state.addIsLoading = false;\n      state.addErrors = action.error;\n    });\n    builder.addCase(fetchPlayerPositionsAsync.pending, state => {\n      state.getPositionsIsLoading = true;\n    });\n    builder.addCase(fetchPlayerPositionsAsync.fulfilled, (state, action) => {\n      state.getPositionsIsLoading = false;\n      state.getPositionsFetchResult = action.payload;\n    });\n    builder.addCase(fetchPlayerPositionsAsync.rejected, (state, action) => {\n      state.getPositionsIsLoading = false;\n      state.getPositionsError = action.error;\n    });\n    builder.addCase(fetchSinglePlayerAsync.pending, state => {\n      state.getOnePlayerIsLoading = true;\n    });\n    builder.addCase(fetchSinglePlayerAsync.fulfilled, (state, action) => {\n      state.getOnePlayerIsLoading = false;\n      state.getOnePlayerFetchResult = action.payload;\n    });\n    builder.addCase(fetchSinglePlayerAsync.rejected, (state, action) => {\n      state.getOnePlayerIsLoading = false;\n      state.getOnePlayerError = action.error;\n    });\n    builder.addCase(fetchPlayersAsync.pending, state => {\n      state.getPlayersIsLoading = true;\n    });\n    builder.addCase(fetchPlayersAsync.fulfilled, (state, action) => {\n      state.getPlayersIsLoading = false;\n      state.getPlayersFetchResult = action.payload;\n    });\n    builder.addCase(fetchPlayersAsync.rejected, (state, action) => {\n      state.getPlayersIsLoading = false;\n      state.getPlayersError = action.error;\n    });\n    builder.addCase(fetchUpdatePlayerById.pending, state => {\n      state.updateIsLoading = true;\n    });\n    builder.addCase(fetchUpdatePlayerById.fulfilled, (state, action) => {\n      state.updateIsLoading = false;\n      state.updateFetchResult = action.payload;\n    });\n    builder.addCase(fetchUpdatePlayerById.rejected, (state, action) => {\n      state.updateIsLoading = false;\n      state.updateErrors = action.error;\n    });\n  }\n});\nexport const playerReducer = playerSlice.reducer;\nconst playersFetchSuffixInitialState = {\n  searchText: \"\",\n  pageNumber: 1,\n  pageSize: 6,\n  teamIds: \"\"\n};\nconst playersFetchSuffixSlise = createSlice({\n  name: \"playersFetchSuffix\",\n  initialState: playersFetchSuffixInitialState,\n  reducers: {\n    resetSuffix: state => playersFetchSuffixInitialState,\n    setSearchText: (state, action) => {\n      state.pageNumber = 1;\n      state.searchText = action.payload;\n    },\n    setPageNumber: (state, action) => {\n      state.pageNumber = action.payload;\n    },\n    setPageSize: (state, action) => {\n      state.pageNumber = 1;\n      state.pageSize = action.payload;\n    },\n    setTeamIds: (state, action) => {\n      state.pageNumber = 1;\n      state.teamIds = action.payload;\n    }\n  }\n});\nexport const {\n  resetSuffix,\n  setSearchText,\n  setPageNumber,\n  setPageSize,\n  setTeamIds\n} = playersFetchSuffixSlise.actions;\nexport const playersFetchSuffixReducer = playersFetchSuffixSlise.reducer;","map":{"version":3,"sources":["D:/study/dex-test/src/modules/player/playerSlice.ts"],"names":["createSlice","fetchAddPlayer","fetchPlayersAsync","fetchSinglePlayerAsync","fetchUpdatePlayerById","fetchPlayerPositionsAsync","initialState","addIsLoading","addFetchResult","addErrors","getPositionsIsLoading","getPositionsFetchResult","getPositionsError","getOnePlayerIsLoading","getOnePlayerFetchResult","name","number","position","teamId","birthday","height","weight","avatarUrl","id","teamName","getOnePlayerError","getPlayersIsLoading","getPlayersFetchResult","data","count","page","size","getPlayersError","updateIsLoading","updateFetchResult","updateErrors","fetchSuffixSearchText","fetchSuffixPageNumber","fetchSuffixPageSize","fetchSuffixTeamIds","playerSlice","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","error","playerReducer","reducer","playersFetchSuffixInitialState","searchText","pageNumber","pageSize","teamIds","playersFetchSuffixSlise","resetSuffix","setSearchText","setPageNumber","setPageSize","setTeamIds","actions","playersFetchSuffixReducer"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AAGA,SACEC,cADF,EAEEC,iBAFF,EAGEC,sBAHF,EAIEC,qBAJF,EAKEC,yBALF,QAMO,eANP;AAQA,MAAMC,YAA2B,GAAG;AAClCC,EAAAA,YAAY,EAAE,IADoB;AAElCC,EAAAA,cAAc,EAAE,EAFkB;AAGlCC,EAAAA,SAAS,EAAE,IAHuB;AAIlCC,EAAAA,qBAAqB,EAAE,IAJW;AAKlCC,EAAAA,uBAAuB,EAAE,EALS;AAMlCC,EAAAA,iBAAiB,EAAE,IANe;AAOlCC,EAAAA,qBAAqB,EAAE,IAPW;AAQlCC,EAAAA,uBAAuB,EAAE;AACvBC,IAAAA,IAAI,EAAE,EADiB;AAEvBC,IAAAA,MAAM,EAAE,CAFe;AAGvBC,IAAAA,QAAQ,EAAE,EAHa;AAIvBC,IAAAA,MAAM,EAAE,CAJe;AAKvBC,IAAAA,QAAQ,EAAE,EALa;AAMvBC,IAAAA,MAAM,EAAE,CANe;AAOvBC,IAAAA,MAAM,EAAE,CAPe;AAQvBC,IAAAA,SAAS,EAAE,EARY;AASvBC,IAAAA,EAAE,EAAE,CATmB;AAUvBC,IAAAA,QAAQ,EAAE;AAVa,GARS;AAoBlCC,EAAAA,iBAAiB,EAAE,IApBe;AAqBlCC,EAAAA,mBAAmB,EAAE,IArBa;AAsBlCC,EAAAA,qBAAqB,EAAE;AACrBC,IAAAA,IAAI,EAAE,EADe;AAErBC,IAAAA,KAAK,EAAE,CAFc;AAGrBC,IAAAA,IAAI,EAAE,CAHe;AAIrBC,IAAAA,IAAI,EAAE;AAJe,GAtBW;AA4BlCC,EAAAA,eAAe,EAAE,IA5BiB;AA6BlCC,EAAAA,eAAe,EAAE,IA7BiB;AA8BlCC,EAAAA,iBAAiB,EAAE,EA9Be;AA+BlCC,EAAAA,YAAY,EAAE,IA/BoB;AAgClCC,EAAAA,qBAAqB,EAAE,EAhCW;AAiClCC,EAAAA,qBAAqB,EAAE,CAjCW;AAkClCC,EAAAA,mBAAmB,EAAE,CAlCa;AAmClCC,EAAAA,kBAAkB,EAAE;AAnCc,CAApC;AAsCA,MAAMC,WAAW,GAAGxC,WAAW,CAAC;AAC9Be,EAAAA,IAAI,EAAE,QADwB;AAE9BT,EAAAA,YAF8B;AAG9BmC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAGC,KAAD,IAAWrC;AADV,GAHoB;AAM9BsC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CAACC,OAAR,CAAgB7C,cAAc,CAAC8C,OAA/B,EAAyCJ,KAAD,IAAW;AACjDA,MAAAA,KAAK,CAACpC,YAAN,GAAqB,IAArB;AACD,KAFD;AAGAsC,IAAAA,OAAO,CAACC,OAAR,CAAgB7C,cAAc,CAAC+C,SAA/B,EAA0C,CAACL,KAAD,EAAQM,MAAR,KAAmB;AAC3DN,MAAAA,KAAK,CAACpC,YAAN,GAAqB,KAArB;AACAoC,MAAAA,KAAK,CAACnC,cAAN,GAAuByC,MAAM,CAACC,OAA9B;AACD,KAHD;AAIAL,IAAAA,OAAO,CAACC,OAAR,CAAgB7C,cAAc,CAACkD,QAA/B,EAAyC,CAACR,KAAD,EAAQM,MAAR,KAAmB;AAC1DN,MAAAA,KAAK,CAACpC,YAAN,GAAqB,KAArB;AACAoC,MAAAA,KAAK,CAAClC,SAAN,GAAkBwC,MAAM,CAACG,KAAzB;AACD,KAHD;AAIAP,IAAAA,OAAO,CAACC,OAAR,CAAgBzC,yBAAyB,CAAC0C,OAA1C,EAAoDJ,KAAD,IAAW;AAC5DA,MAAAA,KAAK,CAACjC,qBAAN,GAA8B,IAA9B;AACD,KAFD;AAGAmC,IAAAA,OAAO,CAACC,OAAR,CAAgBzC,yBAAyB,CAAC2C,SAA1C,EAAqD,CAACL,KAAD,EAAQM,MAAR,KAAmB;AACtEN,MAAAA,KAAK,CAACjC,qBAAN,GAA8B,KAA9B;AACAiC,MAAAA,KAAK,CAAChC,uBAAN,GAAgCsC,MAAM,CAACC,OAAvC;AACD,KAHD;AAIAL,IAAAA,OAAO,CAACC,OAAR,CAAgBzC,yBAAyB,CAAC8C,QAA1C,EAAoD,CAACR,KAAD,EAAQM,MAAR,KAAmB;AACrEN,MAAAA,KAAK,CAACjC,qBAAN,GAA8B,KAA9B;AACAiC,MAAAA,KAAK,CAAC/B,iBAAN,GAA0BqC,MAAM,CAACG,KAAjC;AACD,KAHD;AAIAP,IAAAA,OAAO,CAACC,OAAR,CAAgB3C,sBAAsB,CAAC4C,OAAvC,EAAiDJ,KAAD,IAAW;AACzDA,MAAAA,KAAK,CAAC9B,qBAAN,GAA8B,IAA9B;AACD,KAFD;AAGAgC,IAAAA,OAAO,CAACC,OAAR,CAAgB3C,sBAAsB,CAAC6C,SAAvC,EAAkD,CAACL,KAAD,EAAQM,MAAR,KAAmB;AACnEN,MAAAA,KAAK,CAAC9B,qBAAN,GAA8B,KAA9B;AACA8B,MAAAA,KAAK,CAAC7B,uBAAN,GAAgCmC,MAAM,CAACC,OAAvC;AACD,KAHD;AAIAL,IAAAA,OAAO,CAACC,OAAR,CAAgB3C,sBAAsB,CAACgD,QAAvC,EAAiD,CAACR,KAAD,EAAQM,MAAR,KAAmB;AAClEN,MAAAA,KAAK,CAAC9B,qBAAN,GAA8B,KAA9B;AACA8B,MAAAA,KAAK,CAAClB,iBAAN,GAA0BwB,MAAM,CAACG,KAAjC;AACD,KAHD;AAIAP,IAAAA,OAAO,CAACC,OAAR,CAAgB5C,iBAAiB,CAAC6C,OAAlC,EAA4CJ,KAAD,IAAW;AACpDA,MAAAA,KAAK,CAACjB,mBAAN,GAA4B,IAA5B;AACD,KAFD;AAGAmB,IAAAA,OAAO,CAACC,OAAR,CAAgB5C,iBAAiB,CAAC8C,SAAlC,EAA6C,CAACL,KAAD,EAAQM,MAAR,KAAmB;AAC9DN,MAAAA,KAAK,CAACjB,mBAAN,GAA4B,KAA5B;AACAiB,MAAAA,KAAK,CAAChB,qBAAN,GAA8BsB,MAAM,CAACC,OAArC;AACD,KAHD;AAIAL,IAAAA,OAAO,CAACC,OAAR,CAAgB5C,iBAAiB,CAACiD,QAAlC,EAA4C,CAACR,KAAD,EAAQM,MAAR,KAAmB;AAC7DN,MAAAA,KAAK,CAACjB,mBAAN,GAA4B,KAA5B;AACAiB,MAAAA,KAAK,CAACX,eAAN,GAAwBiB,MAAM,CAACG,KAA/B;AACD,KAHD;AAIAP,IAAAA,OAAO,CAACC,OAAR,CAAgB1C,qBAAqB,CAAC2C,OAAtC,EAAgDJ,KAAD,IAAW;AACxDA,MAAAA,KAAK,CAACV,eAAN,GAAwB,IAAxB;AACD,KAFD;AAGAY,IAAAA,OAAO,CAACC,OAAR,CAAgB1C,qBAAqB,CAAC4C,SAAtC,EAAiD,CAACL,KAAD,EAAQM,MAAR,KAAmB;AAClEN,MAAAA,KAAK,CAACV,eAAN,GAAwB,KAAxB;AACAU,MAAAA,KAAK,CAACT,iBAAN,GAA0Be,MAAM,CAACC,OAAjC;AACD,KAHD;AAIAL,IAAAA,OAAO,CAACC,OAAR,CAAgB1C,qBAAqB,CAAC+C,QAAtC,EAAgD,CAACR,KAAD,EAAQM,MAAR,KAAmB;AACjEN,MAAAA,KAAK,CAACV,eAAN,GAAwB,KAAxB;AACAU,MAAAA,KAAK,CAACR,YAAN,GAAqBc,MAAM,CAACG,KAA5B;AACD,KAHD;AAID;AA9D6B,CAAD,CAA/B;AAiEA,OAAO,MAAMC,aAAa,GAAGb,WAAW,CAACc,OAAlC;AAEP,MAAMC,8BAA4C,GAAG;AACnDC,EAAAA,UAAU,EAAE,EADuC;AAEnDC,EAAAA,UAAU,EAAE,CAFuC;AAGnDC,EAAAA,QAAQ,EAAE,CAHyC;AAInDC,EAAAA,OAAO,EAAE;AAJ0C,CAArD;AAOA,MAAMC,uBAAuB,GAAG5D,WAAW,CAAC;AAC1Ce,EAAAA,IAAI,EAAE,oBADoC;AAE1CT,EAAAA,YAAY,EAAEiD,8BAF4B;AAG1Cd,EAAAA,QAAQ,EAAE;AACRoB,IAAAA,WAAW,EAAGlB,KAAD,IAAWY,8BADhB;AAERO,IAAAA,aAAa,EAAE,CAACnB,KAAD,EAAQM,MAAR,KAA0C;AACvDN,MAAAA,KAAK,CAACc,UAAN,GAAmB,CAAnB;AACAd,MAAAA,KAAK,CAACa,UAAN,GAAmBP,MAAM,CAACC,OAA1B;AACD,KALO;AAMRa,IAAAA,aAAa,EAAE,CAACpB,KAAD,EAAQM,MAAR,KAA0C;AACvDN,MAAAA,KAAK,CAACc,UAAN,GAAmBR,MAAM,CAACC,OAA1B;AACD,KARO;AASRc,IAAAA,WAAW,EAAE,CAACrB,KAAD,EAAQM,MAAR,KAA0C;AACrDN,MAAAA,KAAK,CAACc,UAAN,GAAmB,CAAnB;AACAd,MAAAA,KAAK,CAACe,QAAN,GAAiBT,MAAM,CAACC,OAAxB;AACD,KAZO;AAaRe,IAAAA,UAAU,EAAE,CAACtB,KAAD,EAAQM,MAAR,KAA0C;AACpDN,MAAAA,KAAK,CAACc,UAAN,GAAmB,CAAnB;AACAd,MAAAA,KAAK,CAACgB,OAAN,GAAgBV,MAAM,CAACC,OAAvB;AACD;AAhBO;AAHgC,CAAD,CAA3C;AAuBA,OAAO,MAAM;AACXW,EAAAA,WADW;AAEXC,EAAAA,aAFW;AAGXC,EAAAA,aAHW;AAIXC,EAAAA,WAJW;AAKXC,EAAAA;AALW,IAMTL,uBAAuB,CAACM,OANrB;AAQP,OAAO,MAAMC,yBAAyB,GAAGP,uBAAuB,CAACN,OAA1D","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { IFetchSuffix } from \"../../api/dto/components.g\";\r\nimport { IPlayersState, IUpdatePlayerById } from \"../../api/dto/player.g\";\r\nimport {\r\n  fetchAddPlayer,\r\n  fetchPlayersAsync,\r\n  fetchSinglePlayerAsync,\r\n  fetchUpdatePlayerById,\r\n  fetchPlayerPositionsAsync,\r\n} from \"./playerThunk\";\r\n\r\nconst initialState: IPlayersState = {\r\n  addIsLoading: true,\r\n  addFetchResult: {},\r\n  addErrors: null,\r\n  getPositionsIsLoading: true,\r\n  getPositionsFetchResult: [],\r\n  getPositionsError: null,\r\n  getOnePlayerIsLoading: true,\r\n  getOnePlayerFetchResult: {\r\n    name: \"\",\r\n    number: 0,\r\n    position: \"\",\r\n    teamId: 0,\r\n    birthday: \"\",\r\n    height: 0,\r\n    weight: 0,\r\n    avatarUrl: \"\",\r\n    id: 0,\r\n    teamName: \"\",\r\n  },\r\n  getOnePlayerError: null,\r\n  getPlayersIsLoading: true,\r\n  getPlayersFetchResult: {\r\n    data: [],\r\n    count: 0,\r\n    page: 1,\r\n    size: 6,\r\n  },\r\n  getPlayersError: null,\r\n  updateIsLoading: true,\r\n  updateFetchResult: {},\r\n  updateErrors: null,\r\n  fetchSuffixSearchText: \"\",\r\n  fetchSuffixPageNumber: 1,\r\n  fetchSuffixPageSize: 6,\r\n  fetchSuffixTeamIds: \"\",\r\n};\r\n\r\nconst playerSlice = createSlice({\r\n  name: \"player\",\r\n  initialState,\r\n  reducers: {\r\n    reset: (state) => initialState,\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchAddPlayer.pending, (state) => {\r\n      state.addIsLoading = true;\r\n    });\r\n    builder.addCase(fetchAddPlayer.fulfilled, (state, action) => {\r\n      state.addIsLoading = false;\r\n      state.addFetchResult = action.payload;\r\n    });\r\n    builder.addCase(fetchAddPlayer.rejected, (state, action) => {\r\n      state.addIsLoading = false;\r\n      state.addErrors = action.error;\r\n    });\r\n    builder.addCase(fetchPlayerPositionsAsync.pending, (state) => {\r\n      state.getPositionsIsLoading = true;\r\n    });\r\n    builder.addCase(fetchPlayerPositionsAsync.fulfilled, (state, action) => {\r\n      state.getPositionsIsLoading = false;\r\n      state.getPositionsFetchResult = action.payload;\r\n    });\r\n    builder.addCase(fetchPlayerPositionsAsync.rejected, (state, action) => {\r\n      state.getPositionsIsLoading = false;\r\n      state.getPositionsError = action.error;\r\n    });\r\n    builder.addCase(fetchSinglePlayerAsync.pending, (state) => {\r\n      state.getOnePlayerIsLoading = true;\r\n    });\r\n    builder.addCase(fetchSinglePlayerAsync.fulfilled, (state, action) => {\r\n      state.getOnePlayerIsLoading = false;\r\n      state.getOnePlayerFetchResult = action.payload;\r\n    });\r\n    builder.addCase(fetchSinglePlayerAsync.rejected, (state, action) => {\r\n      state.getOnePlayerIsLoading = false;\r\n      state.getOnePlayerError = action.error;\r\n    });\r\n    builder.addCase(fetchPlayersAsync.pending, (state) => {\r\n      state.getPlayersIsLoading = true;\r\n    });\r\n    builder.addCase(fetchPlayersAsync.fulfilled, (state, action) => {\r\n      state.getPlayersIsLoading = false;\r\n      state.getPlayersFetchResult = action.payload;\r\n    });\r\n    builder.addCase(fetchPlayersAsync.rejected, (state, action) => {\r\n      state.getPlayersIsLoading = false;\r\n      state.getPlayersError = action.error;\r\n    });\r\n    builder.addCase(fetchUpdatePlayerById.pending, (state) => {\r\n      state.updateIsLoading = true;\r\n    });\r\n    builder.addCase(fetchUpdatePlayerById.fulfilled, (state, action) => {\r\n      state.updateIsLoading = false;\r\n      state.updateFetchResult = action.payload;\r\n    });\r\n    builder.addCase(fetchUpdatePlayerById.rejected, (state, action) => {\r\n      state.updateIsLoading = false;\r\n      state.updateErrors = action.error;\r\n    });\r\n  },\r\n});\r\n\r\nexport const playerReducer = playerSlice.reducer;\r\n\r\nconst playersFetchSuffixInitialState: IFetchSuffix = {\r\n  searchText: \"\",\r\n  pageNumber: 1,\r\n  pageSize: 6,\r\n  teamIds: \"\",\r\n};\r\n\r\nconst playersFetchSuffixSlise = createSlice({\r\n  name: \"playersFetchSuffix\",\r\n  initialState: playersFetchSuffixInitialState,\r\n  reducers: {\r\n    resetSuffix: (state) => playersFetchSuffixInitialState,\r\n    setSearchText: (state, action: PayloadAction<string>) => {\r\n      state.pageNumber = 1;\r\n      state.searchText = action.payload;\r\n    },\r\n    setPageNumber: (state, action: PayloadAction<number>) => {\r\n      state.pageNumber = action.payload;\r\n    },\r\n    setPageSize: (state, action: PayloadAction<number>) => {\r\n      state.pageNumber = 1;\r\n      state.pageSize = action.payload;\r\n    },\r\n    setTeamIds: (state, action: PayloadAction<string>) => {\r\n      state.pageNumber = 1;\r\n      state.teamIds = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  resetSuffix,\r\n  setSearchText,\r\n  setPageNumber,\r\n  setPageSize,\r\n  setTeamIds,\r\n} = playersFetchSuffixSlise.actions;\r\n\r\nexport const playersFetchSuffixReducer = playersFetchSuffixSlise.reducer;\r\n"]},"metadata":{},"sourceType":"module"}