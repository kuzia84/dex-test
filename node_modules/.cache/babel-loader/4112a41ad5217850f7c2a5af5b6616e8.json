{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  isLoading: false,\n  fetchResult: {},\n  errors: null\n};\nexport const fetchAddPlayer = createAsyncThunk(\"player/addPlayer\", async data => {\n  const myHeaders = new Headers({\n    \"Content-Type\": \"application/json\",\n    Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n  });\n  const requestOptions = {\n    method: \"POST\",\n    headers: myHeaders,\n    body: JSON.stringify(data)\n  };\n  const response = await fetch(\"http://dev.trainee.dex-it.ru/api/Player/Add\", requestOptions);\n  return await response.json();\n});\nconst addPlayerSlise = createSlice({\n  name: \"addPlayer\",\n  initialState,\n  reducers: {\n    reset: state => initialState\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchAddPlayer.pending, state => {\n      state.isLoading = true;\n    });\n    builder.addCase(fetchAddPlayer.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.fetchResult = action.payload;\n    });\n    builder.addCase(fetchAddPlayer.rejected, (state, action) => {\n      state.isLoading = false;\n      state.errors = action.error;\n    });\n  }\n});\nexport const selectAddPlayerData = state => state.addPlayer.fetchResult;\nexport const selectAddPlayerIsLoading = state => state.addPlayer.isLoading;\nexport const selectAddPlayerError = state => state.addPlayer.errors;\nexport const addPlayerReducer = addPlayerSlise.reducer;","map":{"version":3,"sources":["D:/study/dex-test/src/store/addPlayerSlice.ts"],"names":["createAsyncThunk","createSlice","initialState","isLoading","fetchResult","errors","fetchAddPlayer","data","myHeaders","Headers","Authorization","localStorage","getItem","requestOptions","method","headers","body","JSON","stringify","response","fetch","json","addPlayerSlise","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","error","selectAddPlayerData","addPlayer","selectAddPlayerIsLoading","selectAddPlayerError","addPlayerReducer","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AAIA,MAAMC,YAA+B,GAAG;AACtCC,EAAAA,SAAS,EAAE,KAD2B;AAEtCC,EAAAA,WAAW,EAAE,EAFyB;AAGtCC,EAAAA,MAAM,EAAE;AAH8B,CAAxC;AAMA,OAAO,MAAMC,cAAc,GAAGN,gBAAgB,CAC5C,kBAD4C,EAE5C,MAAOO,IAAP,IAAgB;AACd,QAAMC,SAAS,GAAG,IAAIC,OAAJ,CAAY;AAC5B,oBAAgB,kBADY;AAE5BC,IAAAA,aAAa,EAAG,UAASC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAA8B;AAF3B,GAAZ,CAAlB;AAIA,QAAMC,cAAc,GAAG;AACrBC,IAAAA,MAAM,EAAE,MADa;AAErBC,IAAAA,OAAO,EAAEP,SAFY;AAGrBQ,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeX,IAAf;AAHe,GAAvB;AAKA,QAAMY,QAAQ,GAAG,MAAMC,KAAK,CAC1B,6CAD0B,EAE1BP,cAF0B,CAA5B;AAIA,SAAO,MAAMM,QAAQ,CAACE,IAAT,EAAb;AACD,CAjB2C,CAAvC;AAoBP,MAAMC,cAAc,GAAGrB,WAAW,CAAC;AACjCsB,EAAAA,IAAI,EAAE,WAD2B;AAEjCrB,EAAAA,YAFiC;AAGjCsB,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAGC,KAAD,IAAWxB;AADV,GAHuB;AAMjCyB,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CAACC,OAAR,CAAgBvB,cAAc,CAACwB,OAA/B,EAAyCJ,KAAD,IAAW;AACjDA,MAAAA,KAAK,CAACvB,SAAN,GAAkB,IAAlB;AACD,KAFD;AAGAyB,IAAAA,OAAO,CAACC,OAAR,CAAgBvB,cAAc,CAACyB,SAA/B,EAA0C,CAACL,KAAD,EAAQM,MAAR,KAAmB;AAC3DN,MAAAA,KAAK,CAACvB,SAAN,GAAkB,KAAlB;AACAuB,MAAAA,KAAK,CAACtB,WAAN,GAAoB4B,MAAM,CAACC,OAA3B;AACD,KAHD;AAIAL,IAAAA,OAAO,CAACC,OAAR,CAAgBvB,cAAc,CAAC4B,QAA/B,EAAyC,CAACR,KAAD,EAAQM,MAAR,KAAmB;AAC1DN,MAAAA,KAAK,CAACvB,SAAN,GAAkB,KAAlB;AACAuB,MAAAA,KAAK,CAACrB,MAAN,GAAe2B,MAAM,CAACG,KAAtB;AACD,KAHD;AAID;AAlBgC,CAAD,CAAlC;AAqBA,OAAO,MAAMC,mBAAmB,GAAIV,KAAD,IACjCA,KAAK,CAACW,SAAN,CAAgBjC,WADX;AAEP,OAAO,MAAMkC,wBAAwB,GAAIZ,KAAD,IACtCA,KAAK,CAACW,SAAN,CAAgBlC,SADX;AAEP,OAAO,MAAMoC,oBAAoB,GAAIb,KAAD,IAClCA,KAAK,CAACW,SAAN,CAAgBhC,MADX;AAGP,OAAO,MAAMmC,gBAAgB,GAAGlB,cAAc,CAACmB,OAAxC","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport { AddNewPlayerState, NewPlayerDto } from \"../interfaces/interfaces\";\r\nimport { RootState } from \"./store\";\r\n\r\nconst initialState: AddNewPlayerState = {\r\n  isLoading: false,\r\n  fetchResult: {},\r\n  errors: null,\r\n};\r\n\r\nexport const fetchAddPlayer = createAsyncThunk<any, NewPlayerDto>(\r\n  \"player/addPlayer\",\r\n  async (data) => {\r\n    const myHeaders = new Headers({\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n    });\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: JSON.stringify(data),\r\n    };\r\n    const response = await fetch(\r\n      \"http://dev.trainee.dex-it.ru/api/Player/Add\",\r\n      requestOptions\r\n    );\r\n    return await response.json();\r\n  }\r\n);\r\n\r\nconst addPlayerSlise = createSlice({\r\n  name: \"addPlayer\",\r\n  initialState,\r\n  reducers: {\r\n    reset: (state) => initialState,\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchAddPlayer.pending, (state) => {\r\n      state.isLoading = true;\r\n    });\r\n    builder.addCase(fetchAddPlayer.fulfilled, (state, action) => {\r\n      state.isLoading = false;\r\n      state.fetchResult = action.payload;\r\n    });\r\n    builder.addCase(fetchAddPlayer.rejected, (state, action) => {\r\n      state.isLoading = false;\r\n      state.errors = action.error;\r\n    });\r\n  },\r\n});\r\n\r\nexport const selectAddPlayerData = (state: RootState) =>\r\n  state.addPlayer.fetchResult;\r\nexport const selectAddPlayerIsLoading = (state: RootState) =>\r\n  state.addPlayer.isLoading;\r\nexport const selectAddPlayerError = (state: RootState) =>\r\n  state.addPlayer.errors;\r\n\r\nexport const addPlayerReducer = addPlayerSlise.reducer;\r\n"]},"metadata":{},"sourceType":"module"}