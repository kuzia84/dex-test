{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  isLoading: true,\n  fetchResult: {},\n  errors: null\n};\nexport const fetchUpdatePlayerById = createAsyncThunk(\"player/updatePlayerById\", async data => {\n  const myHeaders = new Headers({\n    \"Content-Type\": \"application/json\",\n    Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n  });\n  const requestOptions = {\n    method: \"PUT\",\n    headers: myHeaders,\n    body: JSON.stringify(data)\n  };\n  const response = await fetch(\"http://dev.trainee.dex-it.ru/api/Player/Update\", requestOptions);\n  return await response.json();\n});\nconst updatePlayerByIdSlise = createSlice({\n  name: \"updatePlayerById\",\n  initialState,\n  reducers: {\n    reset: state => initialState\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchUpdatePlayerById.pending, state => {\n      state.isLoading = true;\n    });\n    builder.addCase(fetchUpdatePlayerById.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.fetchResult = action.payload;\n    });\n    builder.addCase(fetchUpdatePlayerById.rejected, (state, action) => {\n      state.isLoading = false;\n      state.errors = action.error;\n    });\n  }\n});\nexport const SelectUpdatePlayerByIdResult = state => state.updatePlayerById.fetchResult;\n_c = SelectUpdatePlayerByIdResult;\nexport const SelectUpdatePlayerByIdIsLoading = state => state.updatePlayerById.isLoading;\n_c2 = SelectUpdatePlayerByIdIsLoading;\nexport const SelectUpdatePlayerByIdError = state => state.updatePlayerById.errors;\n_c3 = SelectUpdatePlayerByIdError;\nexport const updatePlayerByIdReducer = updatePlayerByIdSlise.reducer;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"SelectUpdatePlayerByIdResult\");\n$RefreshReg$(_c2, \"SelectUpdatePlayerByIdIsLoading\");\n$RefreshReg$(_c3, \"SelectUpdatePlayerByIdError\");","map":{"version":3,"sources":["D:/study/dex-test/src/core/updatePlayerById.ts"],"names":["createAsyncThunk","createSlice","initialState","isLoading","fetchResult","errors","fetchUpdatePlayerById","data","myHeaders","Headers","Authorization","localStorage","getItem","requestOptions","method","headers","body","JSON","stringify","response","fetch","json","updatePlayerByIdSlise","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","error","SelectUpdatePlayerByIdResult","updatePlayerById","SelectUpdatePlayerByIdIsLoading","SelectUpdatePlayerByIdError","updatePlayerByIdReducer","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AAUA,MAAMC,YAA+B,GAAG;AACtCC,EAAAA,SAAS,EAAE,IAD2B;AAEtCC,EAAAA,WAAW,EAAE,EAFyB;AAGtCC,EAAAA,MAAM,EAAE;AAH8B,CAAxC;AAMA,OAAO,MAAMC,qBAAqB,GAAGN,gBAAgB,CACnD,yBADmD,EAEnD,MAAOO,IAAP,IAAgB;AACd,QAAMC,SAAS,GAAG,IAAIC,OAAJ,CAAY;AAC5B,oBAAgB,kBADY;AAE5BC,IAAAA,aAAa,EAAG,UAASC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAA8B;AAF3B,GAAZ,CAAlB;AAIA,QAAMC,cAAc,GAAG;AACrBC,IAAAA,MAAM,EAAE,KADa;AAErBC,IAAAA,OAAO,EAAEP,SAFY;AAGrBQ,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeX,IAAf;AAHe,GAAvB;AAKA,QAAMY,QAAQ,GAAG,MAAMC,KAAK,CAC1B,gDAD0B,EAE1BP,cAF0B,CAA5B;AAIA,SAAO,MAAMM,QAAQ,CAACE,IAAT,EAAb;AACD,CAjBkD,CAA9C;AAoBP,MAAMC,qBAAqB,GAAGrB,WAAW,CAAC;AACxCsB,EAAAA,IAAI,EAAE,kBADkC;AAExCrB,EAAAA,YAFwC;AAGxCsB,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAGC,KAAD,IAAWxB;AADV,GAH8B;AAMxCyB,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CAACC,OAAR,CAAgBvB,qBAAqB,CAACwB,OAAtC,EAAgDJ,KAAD,IAAW;AACxDA,MAAAA,KAAK,CAACvB,SAAN,GAAkB,IAAlB;AACD,KAFD;AAGAyB,IAAAA,OAAO,CAACC,OAAR,CAAgBvB,qBAAqB,CAACyB,SAAtC,EAAiD,CAACL,KAAD,EAAQM,MAAR,KAAmB;AAClEN,MAAAA,KAAK,CAACvB,SAAN,GAAkB,KAAlB;AACAuB,MAAAA,KAAK,CAACtB,WAAN,GAAoB4B,MAAM,CAACC,OAA3B;AACD,KAHD;AAIAL,IAAAA,OAAO,CAACC,OAAR,CAAgBvB,qBAAqB,CAAC4B,QAAtC,EAAgD,CAACR,KAAD,EAAQM,MAAR,KAAmB;AACjEN,MAAAA,KAAK,CAACvB,SAAN,GAAkB,KAAlB;AACAuB,MAAAA,KAAK,CAACrB,MAAN,GAAe2B,MAAM,CAACG,KAAtB;AACD,KAHD;AAID;AAlBuC,CAAD,CAAzC;AAqBA,OAAO,MAAMC,4BAA4B,GAAIV,KAAD,IAC1CA,KAAK,CAACW,gBAAN,CAAuBjC,WADlB;KAAMgC,4B;AAEb,OAAO,MAAME,+BAA+B,GAAIZ,KAAD,IAC7CA,KAAK,CAACW,gBAAN,CAAuBlC,SADlB;MAAMmC,+B;AAEb,OAAO,MAAMC,2BAA2B,GAAIb,KAAD,IACzCA,KAAK,CAACW,gBAAN,CAAuBhC,MADlB;MAAMkC,2B;AAGb,OAAO,MAAMC,uBAAuB,GAAGlB,qBAAqB,CAACmB,OAAtD","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport { NewPlayerDto } from \"../api/dto/player.g\";\r\nimport { RootState } from \"./redux/store\";\r\n\r\ninterface IUpdatePlayerById {\r\n  isLoading: boolean;\r\n  fetchResult: {};\r\n  errors: any;\r\n}\r\n\r\nconst initialState: IUpdatePlayerById = {\r\n  isLoading: true,\r\n  fetchResult: {},\r\n  errors: null,\r\n};\r\n\r\nexport const fetchUpdatePlayerById = createAsyncThunk<string, NewPlayerDto>(\r\n  \"player/updatePlayerById\",\r\n  async (data) => {\r\n    const myHeaders = new Headers({\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n    });\r\n    const requestOptions = {\r\n      method: \"PUT\",\r\n      headers: myHeaders,\r\n      body: JSON.stringify(data),\r\n    };\r\n    const response = await fetch(\r\n      \"http://dev.trainee.dex-it.ru/api/Player/Update\",\r\n      requestOptions\r\n    );\r\n    return await response.json();\r\n  }\r\n);\r\n\r\nconst updatePlayerByIdSlise = createSlice({\r\n  name: \"updatePlayerById\",\r\n  initialState,\r\n  reducers: {\r\n    reset: (state) => initialState,\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchUpdatePlayerById.pending, (state) => {\r\n      state.isLoading = true;\r\n    });\r\n    builder.addCase(fetchUpdatePlayerById.fulfilled, (state, action) => {\r\n      state.isLoading = false;\r\n      state.fetchResult = action.payload;\r\n    });\r\n    builder.addCase(fetchUpdatePlayerById.rejected, (state, action) => {\r\n      state.isLoading = false;\r\n      state.errors = action.error;\r\n    });\r\n  },\r\n});\r\n\r\nexport const SelectUpdatePlayerByIdResult = (state: RootState) =>\r\n  state.updatePlayerById.fetchResult;\r\nexport const SelectUpdatePlayerByIdIsLoading = (state: RootState) =>\r\n  state.updatePlayerById.isLoading;\r\nexport const SelectUpdatePlayerByIdError = (state: RootState) =>\r\n  state.updatePlayerById.errors;\r\n\r\nexport const updatePlayerByIdReducer = updatePlayerByIdSlise.reducer;\r\n"]},"metadata":{},"sourceType":"module"}