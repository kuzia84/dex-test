{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { fetchAddPlayer, fetchPlayersAsync, fetchSinglePlayerAsync, fetchUpdatePlayerById, fetchPlayerPositionsAsync } from \"./playerThunk\";\nconst addInitialState = {\n  isLoading: true,\n  fetchResult: {},\n  errors: null\n};\nconst addPlayerSlise = createSlice({\n  name: \"addPlayer\",\n  initialState: addInitialState,\n  reducers: {\n    reset: state => addInitialState\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchAddPlayer.pending, state => {\n      state.isLoading = true;\n    });\n    builder.addCase(fetchAddPlayer.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.fetchResult = action.payload;\n    });\n    builder.addCase(fetchAddPlayer.rejected, (state, action) => {\n      state.isLoading = false;\n      state.errors = action.error;\n    });\n  }\n});\nexport const addPlayerReducer = addPlayerSlise.reducer;\nconst getPositionsInitialState = {\n  isLoading: true,\n  fetchResult: [],\n  error: null\n};\nconst getPlayerPositionsSlice = createSlice({\n  name: \"getPlayerPositions\",\n  initialState: getPositionsInitialState,\n  reducers: {\n    reset: state => getPositionsInitialState\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchPlayerPositionsAsync.pending, state => {\n      state.isLoading = true;\n    });\n    builder.addCase(fetchPlayerPositionsAsync.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.fetchResult = action.payload;\n    });\n    builder.addCase(fetchPlayerPositionsAsync.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.error;\n    });\n  }\n});\nexport const getPlayerPositionsReducer = getPlayerPositionsSlice.reducer;\nconst getSinglePlayerinitialState = {\n  isLoading: true,\n  fetchResult: {\n    name: \"\",\n    number: 0,\n    position: \"\",\n    teamId: 0,\n    birthday: \"\",\n    height: 0,\n    weight: 0,\n    avatarUrl: \"\",\n    id: 0,\n    teamName: \"\"\n  },\n  error: null\n};\nconst getSinglePlayerSlice = createSlice({\n  name: \"getSinglePlayer\",\n  initialState: getSinglePlayerinitialState,\n  reducers: {\n    reset: state => getSinglePlayerinitialState\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchSinglePlayerAsync.pending, state => {\n      state.isLoading = true;\n    });\n    builder.addCase(fetchSinglePlayerAsync.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.fetchResult = action.payload;\n    });\n    builder.addCase(fetchSinglePlayerAsync.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.error;\n    });\n  }\n});\nexport const getSinglePlayerReducer = getSinglePlayerSlice.reducer;\nconst getPlayersInitialState = {\n  isLoading: true,\n  fetchResult: {\n    data: [],\n    count: 0,\n    page: 1,\n    size: 6\n  },\n  error: null\n};\nconst getPlayersSlice = createSlice({\n  name: \"getPlayers\",\n  initialState: getPlayersInitialState,\n  reducers: {\n    reset: state => getPlayersInitialState\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchPlayersAsync.pending, state => {\n      state.isLoading = true;\n    });\n    builder.addCase(fetchPlayersAsync.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.fetchResult = action.payload;\n    });\n    builder.addCase(fetchPlayersAsync.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.error;\n    });\n  }\n});\nexport const getPlayersReducer = getPlayersSlice.reducer;\nconst updatePlyerInitialState = {\n  isLoading: true,\n  fetchResult: {},\n  errors: null\n};\nconst updatePlayerByIdSlise = createSlice({\n  name: \"updatePlayerById\",\n  initialState: updatePlyerInitialState,\n  reducers: {\n    reset: state => updatePlyerInitialState\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchUpdatePlayerById.pending, state => {\n      state.isLoading = true;\n    });\n    builder.addCase(fetchUpdatePlayerById.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.fetchResult = action.payload;\n    });\n    builder.addCase(fetchUpdatePlayerById.rejected, (state, action) => {\n      state.isLoading = false;\n      state.errors = action.error;\n    });\n  }\n});\nexport const updatePlayerByIdReducer = updatePlayerByIdSlise.reducer;\nconst initialState = {\n  searchText: \"\",\n  pageNumber: 1,\n  pageSize: 6,\n  teamIds: \"\"\n};\nconst playersFetchSuffixSlise = createSlice({\n  name: \"playersFetchSuffix\",\n  initialState,\n  reducers: {\n    resetSuffix: state => initialState,\n    setSearchText: (state, action) => {\n      state.pageNumber = 1;\n      state.searchText = action.payload;\n    },\n    setPageNumber: (state, action) => {\n      state.pageNumber = action.payload;\n    },\n    setPageSize: (state, action) => {\n      state.pageNumber = 1;\n      state.pageSize = action.payload;\n    },\n    setTeamIds: (state, action) => {\n      state.pageNumber = 1;\n      state.teamIds = action.payload;\n    }\n  }\n});\nexport const {\n  resetSuffix,\n  setSearchText,\n  setPageNumber,\n  setPageSize,\n  setTeamIds\n} = playersFetchSuffixSlise.actions;","map":{"version":3,"sources":["D:/study/dex-test/src/modules/player/playerSlice.ts"],"names":["createSlice","fetchAddPlayer","fetchPlayersAsync","fetchSinglePlayerAsync","fetchUpdatePlayerById","fetchPlayerPositionsAsync","addInitialState","isLoading","fetchResult","errors","addPlayerSlise","name","initialState","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","error","addPlayerReducer","reducer","getPositionsInitialState","getPlayerPositionsSlice","getPlayerPositionsReducer","getSinglePlayerinitialState","number","position","teamId","birthday","height","weight","avatarUrl","id","teamName","getSinglePlayerSlice","getSinglePlayerReducer","getPlayersInitialState","data","count","page","size","getPlayersSlice","getPlayersReducer","updatePlyerInitialState","updatePlayerByIdSlise","updatePlayerByIdReducer","searchText","pageNumber","pageSize","teamIds","playersFetchSuffixSlise","resetSuffix","setSearchText","setPageNumber","setPageSize","setTeamIds","actions"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport {\r\n  AddNewPlayerState,\r\n  IUpdatePlayerById,\r\n  PlayerDtoPageResultState,\r\n  PlayerPositionsState,\r\n  SinglePlayerPageResultState,\r\n} from \"../../api/dto/player.g\";\r\nimport {\r\n  fetchAddPlayer,\r\n  fetchPlayersAsync,\r\n  fetchSinglePlayerAsync,\r\n  fetchUpdatePlayerById,\r\n  fetchPlayerPositionsAsync,\r\n} from \"./playerThunk\";\r\n\r\nconst addInitialState: AddNewPlayerState = {\r\n  isLoading: true,\r\n  fetchResult: {},\r\n  errors: null,\r\n};\r\n\r\nconst addPlayerSlise = createSlice({\r\n  name: \"addPlayer\",\r\n  initialState: addInitialState,\r\n  reducers: {\r\n    reset: (state) => addInitialState,\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchAddPlayer.pending, (state) => {\r\n      state.isLoading = true;\r\n    });\r\n    builder.addCase(fetchAddPlayer.fulfilled, (state, action) => {\r\n      state.isLoading = false;\r\n      state.fetchResult = action.payload;\r\n    });\r\n    builder.addCase(fetchAddPlayer.rejected, (state, action) => {\r\n      state.isLoading = false;\r\n      state.errors = action.error;\r\n    });\r\n  },\r\n});\r\n\r\nexport const addPlayerReducer = addPlayerSlise.reducer;\r\n\r\nconst getPositionsInitialState: PlayerPositionsState = {\r\n  isLoading: true,\r\n  fetchResult: [],\r\n  error: null,\r\n};\r\n\r\nconst getPlayerPositionsSlice = createSlice({\r\n  name: \"getPlayerPositions\",\r\n  initialState: getPositionsInitialState,\r\n  reducers: {\r\n    reset: (state) => getPositionsInitialState,\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchPlayerPositionsAsync.pending, (state) => {\r\n      state.isLoading = true;\r\n    });\r\n    builder.addCase(fetchPlayerPositionsAsync.fulfilled, (state, action) => {\r\n      state.isLoading = false;\r\n      state.fetchResult = action.payload;\r\n    });\r\n    builder.addCase(fetchPlayerPositionsAsync.rejected, (state, action) => {\r\n      state.isLoading = false;\r\n      state.error = action.error;\r\n    });\r\n  },\r\n});\r\n\r\nexport const getPlayerPositionsReducer = getPlayerPositionsSlice.reducer;\r\n\r\nconst getSinglePlayerinitialState: SinglePlayerPageResultState = {\r\n  isLoading: true,\r\n  fetchResult: {\r\n    name: \"\",\r\n    number: 0,\r\n    position: \"\",\r\n    teamId: 0,\r\n    birthday: \"\",\r\n    height: 0,\r\n    weight: 0,\r\n    avatarUrl: \"\",\r\n    id: 0,\r\n    teamName: \"\",\r\n  },\r\n  error: null,\r\n};\r\n\r\nconst getSinglePlayerSlice = createSlice({\r\n  name: \"getSinglePlayer\",\r\n  initialState: getSinglePlayerinitialState,\r\n  reducers: {\r\n    reset: (state) => getSinglePlayerinitialState,\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchSinglePlayerAsync.pending, (state) => {\r\n      state.isLoading = true;\r\n    });\r\n    builder.addCase(fetchSinglePlayerAsync.fulfilled, (state, action) => {\r\n      state.isLoading = false;\r\n      state.fetchResult = action.payload;\r\n    });\r\n    builder.addCase(fetchSinglePlayerAsync.rejected, (state, action) => {\r\n      state.isLoading = false;\r\n      state.error = action.error;\r\n    });\r\n  },\r\n});\r\n\r\nexport const getSinglePlayerReducer = getSinglePlayerSlice.reducer;\r\n\r\nconst getPlayersInitialState: PlayerDtoPageResultState = {\r\n  isLoading: true,\r\n  fetchResult: {\r\n    data: [],\r\n    count: 0,\r\n    page: 1,\r\n    size: 6,\r\n  },\r\n  error: null,\r\n};\r\n\r\nconst getPlayersSlice = createSlice({\r\n  name: \"getPlayers\",\r\n  initialState: getPlayersInitialState,\r\n  reducers: {\r\n    reset: (state) => getPlayersInitialState,\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchPlayersAsync.pending, (state) => {\r\n      state.isLoading = true;\r\n    });\r\n    builder.addCase(fetchPlayersAsync.fulfilled, (state, action) => {\r\n      state.isLoading = false;\r\n      state.fetchResult = action.payload;\r\n    });\r\n    builder.addCase(fetchPlayersAsync.rejected, (state, action) => {\r\n      state.isLoading = false;\r\n      state.error = action.error;\r\n    });\r\n  },\r\n});\r\n\r\nexport const getPlayersReducer = getPlayersSlice.reducer;\r\n\r\nconst updatePlyerInitialState: IUpdatePlayerById = {\r\n  isLoading: true,\r\n  fetchResult: {},\r\n  errors: null,\r\n};\r\n\r\nconst updatePlayerByIdSlise = createSlice({\r\n  name: \"updatePlayerById\",\r\n  initialState: updatePlyerInitialState,\r\n  reducers: {\r\n    reset: (state) => updatePlyerInitialState,\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchUpdatePlayerById.pending, (state) => {\r\n      state.isLoading = true;\r\n    });\r\n    builder.addCase(fetchUpdatePlayerById.fulfilled, (state, action) => {\r\n      state.isLoading = false;\r\n      state.fetchResult = action.payload;\r\n    });\r\n    builder.addCase(fetchUpdatePlayerById.rejected, (state, action) => {\r\n      state.isLoading = false;\r\n      state.errors = action.error;\r\n    });\r\n  },\r\n});\r\n\r\nexport const updatePlayerByIdReducer = updatePlayerByIdSlise.reducer;\r\nconst initialState: IFetchSuffix = {\r\n  searchText: \"\",\r\n  pageNumber: 1,\r\n  pageSize: 6,\r\n  teamIds: \"\",\r\n};\r\n\r\nconst playersFetchSuffixSlise = createSlice({\r\n  name: \"playersFetchSuffix\",\r\n  initialState,\r\n  reducers: {\r\n    resetSuffix: (state) => initialState,\r\n    setSearchText: (state, action: PayloadAction<string>) => {\r\n      state.pageNumber = 1;\r\n      state.searchText = action.payload;\r\n    },\r\n    setPageNumber: (state, action: PayloadAction<number>) => {\r\n      state.pageNumber = action.payload;\r\n    },\r\n    setPageSize: (state, action: PayloadAction<number>) => {\r\n      state.pageNumber = 1;\r\n      state.pageSize = action.payload;\r\n    },\r\n    setTeamIds: (state, action: PayloadAction<string>) => {\r\n      state.pageNumber = 1;\r\n      state.teamIds = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  resetSuffix,\r\n  setSearchText,\r\n  setPageNumber,\r\n  setPageSize,\r\n  setTeamIds,\r\n} = playersFetchSuffixSlise.actions;\r\n"]},"metadata":{},"sourceType":"module"}