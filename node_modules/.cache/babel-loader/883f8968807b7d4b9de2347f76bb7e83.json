{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  isLoading: false,\n  fetchResult: {\n    name: \"\",\n    number: 0,\n    position: \"\",\n    teamId: 0,\n    birthday: \"\",\n    height: 0,\n    weight: 0,\n    avatarUrl: \"\",\n    id: 0,\n    teamName: \"\"\n  },\n  error: null\n};\nexport const SinglePlayerAsync = createSlice(\"player/fetchData\", async request => {\n  const myHeaders = new Headers({\n    \"Content-Type\": \"application/json\",\n    Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n  });\n  const requestOptions = {\n    method: \"GET\",\n    headers: myHeaders\n  };\n  const response = await fetch(request, requestOptions);\n  return await response.json();\n});\nexport const getSinglePlayerSlice = createSlice({\n  name: \"getSinglePlayer\",\n  initialState,\n  reducers: {\n    reset: state => initialState\n  },\n  extraReducers: builder => {\n    builder.addCase(SinglePlayerAsync.pending, state => {\n      state.isLoading = true;\n    });\n    builder.addCase(SinglePlayerAsync.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.fetchResult = action.payload;\n    });\n    builder.addCase(SinglePlayerAsync.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.payload;\n    });\n  }\n});\nexport const SelectSinglePlayerData = state => state.getSinglePlayer.fetchResult;\n_c = SelectSinglePlayerData;\nexport const SelectSinglePlayerIsLoading = state => state.getSinglePlayer.isLoading;\n_c2 = SelectSinglePlayerIsLoading;\nexport const SelectSinglePlayerError = state => state.getSinglePlayer.error;\n_c3 = SelectSinglePlayerError;\nexport default getSinglePlayerSlice.reducer;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"SelectSinglePlayerData\");\n$RefreshReg$(_c2, \"SelectSinglePlayerIsLoading\");\n$RefreshReg$(_c3, \"SelectSinglePlayerError\");","map":{"version":3,"sources":["D:/study/dex-test/src/store/getPlayerSlise.ts"],"names":["createSlice","initialState","isLoading","fetchResult","name","number","position","teamId","birthday","height","weight","avatarUrl","id","teamName","error","SinglePlayerAsync","request","myHeaders","Headers","Authorization","localStorage","getItem","requestOptions","method","headers","response","fetch","json","getSinglePlayerSlice","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","SelectSinglePlayerData","getSinglePlayer","SelectSinglePlayerIsLoading","SelectSinglePlayerError","reducer"],"mappings":"AAAA,SAA2BA,WAA3B,QAA8C,kBAA9C;AAIA,MAAMC,YAAyC,GAAG;AAChDC,EAAAA,SAAS,EAAE,KADqC;AAEhDC,EAAAA,WAAW,EAAE;AACXC,IAAAA,IAAI,EAAE,EADK;AAEXC,IAAAA,MAAM,EAAE,CAFG;AAGXC,IAAAA,QAAQ,EAAE,EAHC;AAIXC,IAAAA,MAAM,EAAE,CAJG;AAKXC,IAAAA,QAAQ,EAAE,EALC;AAMXC,IAAAA,MAAM,EAAE,CANG;AAOXC,IAAAA,MAAM,EAAE,CAPG;AAQXC,IAAAA,SAAS,EAAE,EARA;AASXC,IAAAA,EAAE,EAAE,CATO;AAUXC,IAAAA,QAAQ,EAAE;AAVC,GAFmC;AAchDC,EAAAA,KAAK,EAAE;AAdyC,CAAlD;AAiBA,OAAO,MAAMC,iBAAiB,GAAGf,WAAW,CAC1C,kBAD0C,EAE1C,MAAOgB,OAAP,IAAmB;AACjB,QAAMC,SAAS,GAAG,IAAIC,OAAJ,CAAY;AAC5B,oBAAgB,kBADY;AAE5BC,IAAAA,aAAa,EAAG,UAASC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAA8B;AAF3B,GAAZ,CAAlB;AAIA,QAAMC,cAAc,GAAG;AACrBC,IAAAA,MAAM,EAAE,KADa;AAErBC,IAAAA,OAAO,EAAEP;AAFY,GAAvB;AAIA,QAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAACV,OAAD,EAAUM,cAAV,CAA5B;AACA,SAAQ,MAAMG,QAAQ,CAACE,IAAT,EAAd;AACD,CAbyC,CAArC;AAgBP,OAAO,MAAMC,oBAAoB,GAAG5B,WAAW,CAAC;AAC9CI,EAAAA,IAAI,EAAE,iBADwC;AAE9CH,EAAAA,YAF8C;AAG9C4B,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAGC,KAAD,IAAW9B;AADV,GAHoC;AAM9C+B,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CAACC,OAAR,CAAgBnB,iBAAiB,CAACoB,OAAlC,EAA4CJ,KAAD,IAAW;AACpDA,MAAAA,KAAK,CAAC7B,SAAN,GAAkB,IAAlB;AACD,KAFD;AAGA+B,IAAAA,OAAO,CAACC,OAAR,CAAgBnB,iBAAiB,CAACqB,SAAlC,EAA6C,CAACL,KAAD,EAAQM,MAAR,KAAmB;AAC9DN,MAAAA,KAAK,CAAC7B,SAAN,GAAkB,KAAlB;AACA6B,MAAAA,KAAK,CAAC5B,WAAN,GAAoBkC,MAAM,CAACC,OAA3B;AACD,KAHD;AAIAL,IAAAA,OAAO,CAACC,OAAR,CAAgBnB,iBAAiB,CAACwB,QAAlC,EAA4C,CAACR,KAAD,EAAQM,MAAR,KAAmB;AAC7DN,MAAAA,KAAK,CAAC7B,SAAN,GAAkB,KAAlB;AACA6B,MAAAA,KAAK,CAACjB,KAAN,GAAcuB,MAAM,CAACC,OAArB;AACD,KAHD;AAID;AAlB6C,CAAD,CAAxC;AAqBP,OAAO,MAAME,sBAAsB,GAAIT,KAAD,IACpCA,KAAK,CAACU,eAAN,CAAsBtC,WADjB;KAAMqC,sB;AAEb,OAAO,MAAME,2BAA2B,GAAIX,KAAD,IACzCA,KAAK,CAACU,eAAN,CAAsBvC,SADjB;MAAMwC,2B;AAEb,OAAO,MAAMC,uBAAuB,GAAIZ,KAAD,IACrCA,KAAK,CAACU,eAAN,CAAsB3B,KADjB;MAAM6B,uB;AAGb,eAAef,oBAAoB,CAACgB,OAApC","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport { PlayerTeamNameDto, SinglePlayerPageResultState } from \"../Interfaces\";\r\nimport { RootState } from \"./hooks\";\r\n\r\nconst initialState: SinglePlayerPageResultState = {\r\n  isLoading: false,\r\n  fetchResult: {\r\n    name: \"\",\r\n    number: 0,\r\n    position: \"\",\r\n    teamId: 0,\r\n    birthday: \"\",\r\n    height: 0,\r\n    weight: 0,\r\n    avatarUrl: \"\",\r\n    id: 0,\r\n    teamName: \"\",\r\n  },\r\n  error: null,\r\n};\r\n\r\nexport const SinglePlayerAsync = createSlice<any, string>(\r\n  \"player/fetchData\",\r\n  async (request) => {\r\n    const myHeaders = new Headers({\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n    });\r\n    const requestOptions = {\r\n      method: \"GET\",\r\n      headers: myHeaders,\r\n    };\r\n    const response = await fetch(request, requestOptions);\r\n    return (await response.json()) as PlayerTeamNameDto;\r\n  }\r\n);\r\n\r\nexport const getSinglePlayerSlice = createSlice({\r\n  name: \"getSinglePlayer\",\r\n  initialState,\r\n  reducers: {\r\n    reset: (state) => initialState,\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(SinglePlayerAsync.pending, (state) => {\r\n      state.isLoading = true;\r\n    });\r\n    builder.addCase(SinglePlayerAsync.fulfilled, (state, action) => {\r\n      state.isLoading = false;\r\n      state.fetchResult = action.payload;\r\n    });\r\n    builder.addCase(SinglePlayerAsync.rejected, (state, action) => {\r\n      state.isLoading = false;\r\n      state.error = action.payload;\r\n    });\r\n  },\r\n});\r\n\r\nexport const SelectSinglePlayerData = (state: RootState) =>\r\n  state.getSinglePlayer.fetchResult;\r\nexport const SelectSinglePlayerIsLoading = (state: RootState) =>\r\n  state.getSinglePlayer.isLoading;\r\nexport const SelectSinglePlayerError = (state: RootState) =>\r\n  state.getSinglePlayer.error;\r\n\r\nexport default getSinglePlayerSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}