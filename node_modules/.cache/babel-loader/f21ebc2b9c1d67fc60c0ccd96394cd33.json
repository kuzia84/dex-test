{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { fetchAddPlayer, fetchPlayersAsync, fetchSinglePlayerAsync, fetchUpdatePlayerById, fetchPlayerPositionsAsync } from \"./playerThunk\";\nconst initialState = {\n  addIsLoading: true,\n  addFetchResult: {},\n  addErrors: null,\n  getPositionsIsLoading: true,\n  getPositionsFetchResult: [],\n  getPositionsError: null,\n  getOnePlayerIsLoading: true,\n  getOnePlayerFetchResult: {\n    name: \"\",\n    number: 0,\n    position: \"\",\n    teamId: 0,\n    birthday: \"\",\n    height: 0,\n    weight: 0,\n    avatarUrl: \"\",\n    id: 0,\n    teamName: \"\"\n  },\n  getOnePlayerError: null,\n  getPlayersIsLoading: true,\n  getPlayersFetchResult: {\n    data: [],\n    count: 0,\n    page: 1,\n    size: 6\n  },\n  getPlayersError: null,\n  updateIsLoading: true,\n  updateFetchResult: {},\n  updateErrors: null,\n  fetchSuffix: {\n    searchText: \"\",\n    pageNumber: 1,\n    pageSize: 6,\n    teamIds: \"\"\n  }\n};\nconst playerSlice = createSlice({\n  name: \"player\",\n  initialState,\n  reducers: {\n    reset: state => initialState,\n    setSearchText: (state, action) => {\n      state.fetchSuffixPageNumber = 1;\n      state.fetchSuffixSearchText = action.payload;\n    },\n    setPageNumber: (state, action) => {\n      state.fetchSuffixPageNumber = action.payload;\n    },\n    setPageSize: (state, action) => {\n      state.fetchSuffixPageNumber = 1;\n      state.fetchSuffixPageSize = action.payload;\n    },\n    setTeamIds: (state, action) => {\n      state.fetchSuffixPageNumber = 1;\n      state.fetchSuffixTeamIds = action.payload;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchAddPlayer.pending, state => {\n      state.addIsLoading = true;\n    });\n    builder.addCase(fetchAddPlayer.fulfilled, (state, action) => {\n      state.addIsLoading = false;\n      state.addFetchResult = action.payload;\n    });\n    builder.addCase(fetchAddPlayer.rejected, (state, action) => {\n      state.addIsLoading = false;\n      state.addErrors = action.error;\n    });\n    builder.addCase(fetchPlayerPositionsAsync.pending, state => {\n      state.getPositionsIsLoading = true;\n    });\n    builder.addCase(fetchPlayerPositionsAsync.fulfilled, (state, action) => {\n      state.getPositionsIsLoading = false;\n      state.getPositionsFetchResult = action.payload;\n    });\n    builder.addCase(fetchPlayerPositionsAsync.rejected, (state, action) => {\n      state.getPositionsIsLoading = false;\n      state.getPositionsError = action.error;\n    });\n    builder.addCase(fetchSinglePlayerAsync.pending, state => {\n      state.getOnePlayerIsLoading = true;\n    });\n    builder.addCase(fetchSinglePlayerAsync.fulfilled, (state, action) => {\n      state.getOnePlayerIsLoading = false;\n      state.getOnePlayerFetchResult = action.payload;\n    });\n    builder.addCase(fetchSinglePlayerAsync.rejected, (state, action) => {\n      state.getOnePlayerIsLoading = false;\n      state.getOnePlayerError = action.error;\n    });\n    builder.addCase(fetchPlayersAsync.pending, state => {\n      state.getPlayersIsLoading = true;\n    });\n    builder.addCase(fetchPlayersAsync.fulfilled, (state, action) => {\n      state.getPlayersIsLoading = false;\n      state.getPlayersFetchResult = action.payload;\n    });\n    builder.addCase(fetchPlayersAsync.rejected, (state, action) => {\n      state.getPlayersIsLoading = false;\n      state.getPlayersError = action.error;\n    });\n    builder.addCase(fetchUpdatePlayerById.pending, state => {\n      state.updateIsLoading = true;\n    });\n    builder.addCase(fetchUpdatePlayerById.fulfilled, (state, action) => {\n      state.updateIsLoading = false;\n      state.updateFetchResult = action.payload;\n    });\n    builder.addCase(fetchUpdatePlayerById.rejected, (state, action) => {\n      state.updateIsLoading = false;\n      state.updateErrors = action.error;\n    });\n  }\n});\nexport const playerReducer = playerSlice.reducer;\nexport const {\n  reset,\n  setSearchText,\n  setPageNumber,\n  setPageSize,\n  setTeamIds\n} = playerSlice.actions;","map":{"version":3,"sources":["D:/study/dex-test/src/modules/player/playerSlice.ts"],"names":["createSlice","fetchAddPlayer","fetchPlayersAsync","fetchSinglePlayerAsync","fetchUpdatePlayerById","fetchPlayerPositionsAsync","initialState","addIsLoading","addFetchResult","addErrors","getPositionsIsLoading","getPositionsFetchResult","getPositionsError","getOnePlayerIsLoading","getOnePlayerFetchResult","name","number","position","teamId","birthday","height","weight","avatarUrl","id","teamName","getOnePlayerError","getPlayersIsLoading","getPlayersFetchResult","data","count","page","size","getPlayersError","updateIsLoading","updateFetchResult","updateErrors","fetchSuffix","searchText","pageNumber","pageSize","teamIds","playerSlice","reducers","reset","state","setSearchText","action","fetchSuffixPageNumber","fetchSuffixSearchText","payload","setPageNumber","setPageSize","fetchSuffixPageSize","setTeamIds","fetchSuffixTeamIds","extraReducers","builder","addCase","pending","fulfilled","rejected","error","playerReducer","reducer","actions"],"mappings":"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","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport { IFetchSuffix } from \"../../api/dto/components.g\";\r\nimport { IPlayersState } from \"../../api/dto/player.g\";\r\nimport {\r\n  fetchAddPlayer,\r\n  fetchPlayersAsync,\r\n  fetchSinglePlayerAsync,\r\n  fetchUpdatePlayerById,\r\n  fetchPlayerPositionsAsync,\r\n} from \"./playerThunk\";\r\n\r\nconst initialState: IPlayersState = {\r\n  addIsLoading: true,\r\n  addFetchResult: {},\r\n  addErrors: null,\r\n  getPositionsIsLoading: true,\r\n  getPositionsFetchResult: [],\r\n  getPositionsError: null,\r\n  getOnePlayerIsLoading: true,\r\n  getOnePlayerFetchResult: {\r\n    name: \"\",\r\n    number: 0,\r\n    position: \"\",\r\n    teamId: 0,\r\n    birthday: \"\",\r\n    height: 0,\r\n    weight: 0,\r\n    avatarUrl: \"\",\r\n    id: 0,\r\n    teamName: \"\",\r\n  },\r\n  getOnePlayerError: null,\r\n  getPlayersIsLoading: true,\r\n  getPlayersFetchResult: {\r\n    data: [],\r\n    count: 0,\r\n    page: 1,\r\n    size: 6,\r\n  },\r\n  getPlayersError: null,\r\n  updateIsLoading: true,\r\n  updateFetchResult: {},\r\n  updateErrors: null,\r\n  fetchSuffix: {\r\n    searchText: \"\",\r\n    pageNumber: 1,\r\n    pageSize: 6,\r\n    teamIds: \"\",\r\n  },\r\n};\r\n\r\nconst playerSlice = createSlice({\r\n  name: \"player\",\r\n  initialState,\r\n  reducers: {\r\n    reset: (state) => initialState,\r\n    setSearchText: (state, action: PayloadAction<string>) => {\r\n      state.fetchSuffixPageNumber = 1;\r\n      state.fetchSuffixSearchText = action.payload;\r\n    },\r\n    setPageNumber: (state, action: PayloadAction<number>) => {\r\n      state.fetchSuffixPageNumber = action.payload;\r\n    },\r\n    setPageSize: (state, action: PayloadAction<number>) => {\r\n      state.fetchSuffixPageNumber = 1;\r\n      state.fetchSuffixPageSize = action.payload;\r\n    },\r\n    setTeamIds: (state, action: PayloadAction<string>) => {\r\n      state.fetchSuffixPageNumber = 1;\r\n      state.fetchSuffixTeamIds = action.payload;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchAddPlayer.pending, (state) => {\r\n      state.addIsLoading = true;\r\n    });\r\n    builder.addCase(fetchAddPlayer.fulfilled, (state, action) => {\r\n      state.addIsLoading = false;\r\n      state.addFetchResult = action.payload;\r\n    });\r\n    builder.addCase(fetchAddPlayer.rejected, (state, action) => {\r\n      state.addIsLoading = false;\r\n      state.addErrors = action.error;\r\n    });\r\n    builder.addCase(fetchPlayerPositionsAsync.pending, (state) => {\r\n      state.getPositionsIsLoading = true;\r\n    });\r\n    builder.addCase(fetchPlayerPositionsAsync.fulfilled, (state, action) => {\r\n      state.getPositionsIsLoading = false;\r\n      state.getPositionsFetchResult = action.payload;\r\n    });\r\n    builder.addCase(fetchPlayerPositionsAsync.rejected, (state, action) => {\r\n      state.getPositionsIsLoading = false;\r\n      state.getPositionsError = action.error;\r\n    });\r\n    builder.addCase(fetchSinglePlayerAsync.pending, (state) => {\r\n      state.getOnePlayerIsLoading = true;\r\n    });\r\n    builder.addCase(fetchSinglePlayerAsync.fulfilled, (state, action) => {\r\n      state.getOnePlayerIsLoading = false;\r\n      state.getOnePlayerFetchResult = action.payload;\r\n    });\r\n    builder.addCase(fetchSinglePlayerAsync.rejected, (state, action) => {\r\n      state.getOnePlayerIsLoading = false;\r\n      state.getOnePlayerError = action.error;\r\n    });\r\n    builder.addCase(fetchPlayersAsync.pending, (state) => {\r\n      state.getPlayersIsLoading = true;\r\n    });\r\n    builder.addCase(fetchPlayersAsync.fulfilled, (state, action) => {\r\n      state.getPlayersIsLoading = false;\r\n      state.getPlayersFetchResult = action.payload;\r\n    });\r\n    builder.addCase(fetchPlayersAsync.rejected, (state, action) => {\r\n      state.getPlayersIsLoading = false;\r\n      state.getPlayersError = action.error;\r\n    });\r\n    builder.addCase(fetchUpdatePlayerById.pending, (state) => {\r\n      state.updateIsLoading = true;\r\n    });\r\n    builder.addCase(fetchUpdatePlayerById.fulfilled, (state, action) => {\r\n      state.updateIsLoading = false;\r\n      state.updateFetchResult = action.payload;\r\n    });\r\n    builder.addCase(fetchUpdatePlayerById.rejected, (state, action) => {\r\n      state.updateIsLoading = false;\r\n      state.updateErrors = action.error;\r\n    });\r\n  },\r\n});\r\n\r\nexport const playerReducer = playerSlice.reducer;\r\n\r\nexport const {\r\n  reset,\r\n  setSearchText,\r\n  setPageNumber,\r\n  setPageSize,\r\n  setTeamIds,\r\n} = playerSlice.actions;\r\n"]},"metadata":{},"sourceType":"module"}