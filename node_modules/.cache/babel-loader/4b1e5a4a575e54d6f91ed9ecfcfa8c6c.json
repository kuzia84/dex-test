{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { fetchSingleTeamAsync } from \"../../core/getTeamSlice\";\nimport { fetchAddTeam } from \"./teamThunk\";\nconst initialState = {\n  addIsLoading: true,\n  addFetchResult: {},\n  addErrors: null\n};\nconst teamSlise = createSlice({\n  name: \"team\",\n  initialState,\n  reducers: {\n    reset: state => initialState\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchAddTeam.pending, state => {\n      state.addIsLoading = true;\n    });\n    builder.addCase(fetchAddTeam.fulfilled, (state, action) => {\n      state.addIsLoading = false;\n      state.addFetchResult = action.payload;\n    });\n    builder.addCase(fetchAddTeam.rejected, (state, action) => {\n      state.addIsLoading = false;\n      state.addErrors = action.error;\n    });\n    builder.addCase(fetchSingleTeamAsync.pending, state => {\n      state.isLoading = true;\n    });\n    builder.addCase(fetchSingleTeamAsync.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.fetchResult = action.payload;\n    });\n    builder.addCase(fetchSingleTeamAsync.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.error;\n    });\n  }\n});\nexport const teamReducer = teamSlise.reducer;","map":{"version":3,"sources":["D:/study/dex-test/src/modules/team/teamSlice.ts"],"names":["createSlice","fetchSingleTeamAsync","fetchAddTeam","initialState","addIsLoading","addFetchResult","addErrors","teamSlise","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","error","isLoading","fetchResult","teamReducer","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,SAASC,oBAAT,QAAqC,yBAArC;AACA,SAASC,YAAT,QAA6B,aAA7B;AAEA,MAAMC,YAAwB,GAAG;AAC/BC,EAAAA,YAAY,EAAE,IADiB;AAE/BC,EAAAA,cAAc,EAAE,EAFe;AAG/BC,EAAAA,SAAS,EAAE;AAHoB,CAAjC;AAMA,MAAMC,SAAS,GAAGP,WAAW,CAAC;AAC5BQ,EAAAA,IAAI,EAAE,MADsB;AAE5BL,EAAAA,YAF4B;AAG5BM,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAGC,KAAD,IAAWR;AADV,GAHkB;AAM5BS,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CAACC,OAAR,CAAgBZ,YAAY,CAACa,OAA7B,EAAuCJ,KAAD,IAAW;AAC/CA,MAAAA,KAAK,CAACP,YAAN,GAAqB,IAArB;AACD,KAFD;AAGAS,IAAAA,OAAO,CAACC,OAAR,CAAgBZ,YAAY,CAACc,SAA7B,EAAwC,CAACL,KAAD,EAAQM,MAAR,KAAmB;AACzDN,MAAAA,KAAK,CAACP,YAAN,GAAqB,KAArB;AACAO,MAAAA,KAAK,CAACN,cAAN,GAAuBY,MAAM,CAACC,OAA9B;AACD,KAHD;AAIAL,IAAAA,OAAO,CAACC,OAAR,CAAgBZ,YAAY,CAACiB,QAA7B,EAAuC,CAACR,KAAD,EAAQM,MAAR,KAAmB;AACxDN,MAAAA,KAAK,CAACP,YAAN,GAAqB,KAArB;AACAO,MAAAA,KAAK,CAACL,SAAN,GAAkBW,MAAM,CAACG,KAAzB;AACD,KAHD;AAIAP,IAAAA,OAAO,CAACC,OAAR,CAAgBb,oBAAoB,CAACc,OAArC,EAA+CJ,KAAD,IAAW;AACvDA,MAAAA,KAAK,CAACU,SAAN,GAAkB,IAAlB;AACD,KAFD;AAGAR,IAAAA,OAAO,CAACC,OAAR,CAAgBb,oBAAoB,CAACe,SAArC,EAAgD,CAACL,KAAD,EAAQM,MAAR,KAAmB;AACjEN,MAAAA,KAAK,CAACU,SAAN,GAAkB,KAAlB;AACAV,MAAAA,KAAK,CAACW,WAAN,GAAoBL,MAAM,CAACC,OAA3B;AACD,KAHD;AAIAL,IAAAA,OAAO,CAACC,OAAR,CAAgBb,oBAAoB,CAACkB,QAArC,EAA+C,CAACR,KAAD,EAAQM,MAAR,KAAmB;AAChEN,MAAAA,KAAK,CAACU,SAAN,GAAkB,KAAlB;AACAV,MAAAA,KAAK,CAACS,KAAN,GAAcH,MAAM,CAACG,KAArB;AACD,KAHD;AAID;AA7B2B,CAAD,CAA7B;AAgCA,OAAO,MAAMG,WAAW,GAAGhB,SAAS,CAACiB,OAA9B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { ITeamState } from \"../../api/dto/team.g\";\r\nimport { fetchSingleTeamAsync } from \"../../core/getTeamSlice\";\r\nimport { fetchAddTeam } from \"./teamThunk\";\r\n\r\nconst initialState: ITeamState = {\r\n  addIsLoading: true,\r\n  addFetchResult: {},\r\n  addErrors: null,\r\n};\r\n\r\nconst teamSlise = createSlice({\r\n  name: \"team\",\r\n  initialState,\r\n  reducers: {\r\n    reset: (state) => initialState,\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchAddTeam.pending, (state) => {\r\n      state.addIsLoading = true;\r\n    });\r\n    builder.addCase(fetchAddTeam.fulfilled, (state, action) => {\r\n      state.addIsLoading = false;\r\n      state.addFetchResult = action.payload;\r\n    });\r\n    builder.addCase(fetchAddTeam.rejected, (state, action) => {\r\n      state.addIsLoading = false;\r\n      state.addErrors = action.error;\r\n    });\r\n    builder.addCase(fetchSingleTeamAsync.pending, (state) => {\r\n      state.isLoading = true;\r\n    });\r\n    builder.addCase(fetchSingleTeamAsync.fulfilled, (state, action) => {\r\n      state.isLoading = false;\r\n      state.fetchResult = action.payload;\r\n    });\r\n    builder.addCase(fetchSingleTeamAsync.rejected, (state, action) => {\r\n      state.isLoading = false;\r\n      state.error = action.error;\r\n    });\r\n  },\r\n});\r\n\r\nexport const teamReducer = teamSlise.reducer;\r\n"]},"metadata":{},"sourceType":"module"}