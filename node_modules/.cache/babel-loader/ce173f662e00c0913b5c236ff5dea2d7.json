{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  isLoading: false,\n  fetchResult: {\n    name: \"\",\n    foundationYear: 0,\n    division: \"\",\n    conference: \"\",\n    imageUrl: \"\",\n    id: 0\n  },\n  error: null\n};\nexport const fetchSingleTeamAsync = createAsyncThunk(\"team/fetchTeamData\", async request => {\n  const myHeaders = new Headers({\n    \"Content-Type\": \"application/json\",\n    Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n  });\n  const requestOptions = {\n    method: \"GET\",\n    headers: myHeaders\n  };\n  const response = await fetch(request, requestOptions);\n  return await response.json();\n});\nconst getSingleTeamSlice = createSlice({\n  name: \"getSingleTeam\",\n  initialState,\n  reducers: {\n    reset: state => initialState\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchSingleTeamAsync.pending, state => {\n      state.isLoading = true;\n    });\n    builder.addCase(fetchSingleTeamAsync.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.fetchResult = action.payload;\n    });\n    builder.addCase(fetchSingleTeamAsync.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.error;\n    });\n  }\n});\nexport const SelectSingleTeamData = state => state.getSingleTeam.fetchResult;\n_c = SelectSingleTeamData;\nexport const SelectSingleTeamIsLoading = state => state.getSingleTeam.isLoading;\n_c2 = SelectSingleTeamIsLoading;\nexport const SelectSingleTeamError = state => state.getSingleTeam.error;\n_c3 = SelectSingleTeamError;\nexport const getSingleTeamReducer = getSingleTeamSlice.reducer;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"SelectSingleTeamData\");\n$RefreshReg$(_c2, \"SelectSingleTeamIsLoading\");\n$RefreshReg$(_c3, \"SelectSingleTeamError\");","map":{"version":3,"sources":["D:/study/dex-test/src/store/getTeamSlise.ts"],"names":["createAsyncThunk","createSlice","initialState","isLoading","fetchResult","name","foundationYear","division","conference","imageUrl","id","error","fetchSingleTeamAsync","request","myHeaders","Headers","Authorization","localStorage","getItem","requestOptions","method","headers","response","fetch","json","getSingleTeamSlice","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","SelectSingleTeamData","getSingleTeam","SelectSingleTeamIsLoading","SelectSingleTeamError","getSingleTeamReducer","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AAIA,MAAMC,YAAuC,GAAG;AAC9CC,EAAAA,SAAS,EAAE,KADmC;AAE9CC,EAAAA,WAAW,EAAE;AACXC,IAAAA,IAAI,EAAE,EADK;AAEXC,IAAAA,cAAc,EAAE,CAFL;AAGXC,IAAAA,QAAQ,EAAE,EAHC;AAIXC,IAAAA,UAAU,EAAE,EAJD;AAKXC,IAAAA,QAAQ,EAAE,EALC;AAMXC,IAAAA,EAAE,EAAE;AANO,GAFiC;AAU9CC,EAAAA,KAAK,EAAE;AAVuC,CAAhD;AAaA,OAAO,MAAMC,oBAAoB,GAAGZ,gBAAgB,CAClD,oBADkD,EAElD,MAAOa,OAAP,IAAmB;AACjB,QAAMC,SAAS,GAAG,IAAIC,OAAJ,CAAY;AAC5B,oBAAgB,kBADY;AAE5BC,IAAAA,aAAa,EAAG,UAASC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAA8B;AAF3B,GAAZ,CAAlB;AAIA,QAAMC,cAAc,GAAG;AACrBC,IAAAA,MAAM,EAAE,KADa;AAErBC,IAAAA,OAAO,EAAEP;AAFY,GAAvB;AAIA,QAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAACV,OAAD,EAAUM,cAAV,CAA5B;AACA,SAAQ,MAAMG,QAAQ,CAACE,IAAT,EAAd;AACD,CAbiD,CAA7C;AAgBP,MAAMC,kBAAkB,GAAGxB,WAAW,CAAC;AACrCI,EAAAA,IAAI,EAAE,eAD+B;AAErCH,EAAAA,YAFqC;AAGrCwB,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAGC,KAAD,IAAW1B;AADV,GAH2B;AAMrC2B,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CAACC,OAAR,CAAgBnB,oBAAoB,CAACoB,OAArC,EAA+CJ,KAAD,IAAW;AACvDA,MAAAA,KAAK,CAACzB,SAAN,GAAkB,IAAlB;AACD,KAFD;AAGA2B,IAAAA,OAAO,CAACC,OAAR,CAAgBnB,oBAAoB,CAACqB,SAArC,EAAgD,CAACL,KAAD,EAAQM,MAAR,KAAmB;AACjEN,MAAAA,KAAK,CAACzB,SAAN,GAAkB,KAAlB;AACAyB,MAAAA,KAAK,CAACxB,WAAN,GAAoB8B,MAAM,CAACC,OAA3B;AACD,KAHD;AAIAL,IAAAA,OAAO,CAACC,OAAR,CAAgBnB,oBAAoB,CAACwB,QAArC,EAA+C,CAACR,KAAD,EAAQM,MAAR,KAAmB;AAChEN,MAAAA,KAAK,CAACzB,SAAN,GAAkB,KAAlB;AACAyB,MAAAA,KAAK,CAACjB,KAAN,GAAcuB,MAAM,CAACvB,KAArB;AACD,KAHD;AAID;AAlBoC,CAAD,CAAtC;AAqBA,OAAO,MAAM0B,oBAAoB,GAAIT,KAAD,IAClCA,KAAK,CAACU,aAAN,CAAoBlC,WADf;KAAMiC,oB;AAEb,OAAO,MAAME,yBAAyB,GAAIX,KAAD,IACvCA,KAAK,CAACU,aAAN,CAAoBnC,SADf;MAAMoC,yB;AAEb,OAAO,MAAMC,qBAAqB,GAAIZ,KAAD,IACnCA,KAAK,CAACU,aAAN,CAAoB3B,KADf;MAAM6B,qB;AAGb,OAAO,MAAMC,oBAAoB,GAAGhB,kBAAkB,CAACiB,OAAhD","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport { SingleTeamPageResultState, TeamDto } from \"../Interfaces/interfaces\";\r\nimport { RootState } from \"./store\";\r\n\r\nconst initialState: SingleTeamPageResultState = {\r\n  isLoading: false,\r\n  fetchResult: {\r\n    name: \"\",\r\n    foundationYear: 0,\r\n    division: \"\",\r\n    conference: \"\",\r\n    imageUrl: \"\",\r\n    id: 0,\r\n  },\r\n  error: null,\r\n};\r\n\r\nexport const fetchSingleTeamAsync = createAsyncThunk<any, string>(\r\n  \"team/fetchTeamData\",\r\n  async (request) => {\r\n    const myHeaders = new Headers({\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n    });\r\n    const requestOptions = {\r\n      method: \"GET\",\r\n      headers: myHeaders,\r\n    };\r\n    const response = await fetch(request, requestOptions);\r\n    return (await response.json()) as TeamDto;\r\n  }\r\n);\r\n\r\nconst getSingleTeamSlice = createSlice({\r\n  name: \"getSingleTeam\",\r\n  initialState,\r\n  reducers: {\r\n    reset: (state) => initialState,\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchSingleTeamAsync.pending, (state) => {\r\n      state.isLoading = true;\r\n    });\r\n    builder.addCase(fetchSingleTeamAsync.fulfilled, (state, action) => {\r\n      state.isLoading = false;\r\n      state.fetchResult = action.payload;\r\n    });\r\n    builder.addCase(fetchSingleTeamAsync.rejected, (state, action) => {\r\n      state.isLoading = false;\r\n      state.error = action.error;\r\n    });\r\n  },\r\n});\r\n\r\nexport const SelectSingleTeamData = (state: RootState) =>\r\n  state.getSingleTeam.fetchResult;\r\nexport const SelectSingleTeamIsLoading = (state: RootState) =>\r\n  state.getSingleTeam.isLoading;\r\nexport const SelectSingleTeamError = (state: RootState) =>\r\n  state.getSingleTeam.error;\r\n\r\nexport const getSingleTeamReducer = getSingleTeamSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}