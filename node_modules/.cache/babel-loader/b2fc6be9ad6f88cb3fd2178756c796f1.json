{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  isLoading: true,\n  fetchResult: {\n    data: [],\n    count: 0,\n    page: 1,\n    size: 6\n  },\n  error: null\n};\nexport const fetchTeamsAsync = createAsyncThunk(\"teams/fatchData\", async request => {\n  console.log(\"request: \", request);\n  const myHeaders = new Headers({\n    \"Content-Type\": \"application/json\",\n    Authorization: `Bearer ${localStorage.getItem(\"token\")}`\n  });\n  const requestOptions = {\n    method: \"GET\",\n    headers: myHeaders\n  };\n  const response = await fetch(request, requestOptions);\n  return await response.json();\n});\nexport const getTeamsSlice = createSlice({\n  name: \"getTeams\",\n  initialState,\n  reducers: {\n    reset: state => initialState\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchTeamsAsync.pending, state => {\n      state.isLoading = true;\n    });\n    builder.addCase(fetchTeamsAsync.fulfilled, (state, action) => {\n      state.isLoading = false;\n      state.fetchResult = action.payload;\n    });\n    builder.addCase(fetchTeamsAsync.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.error;\n    });\n  }\n});\nexport const {\n  reset\n} = getTeamsSlice.actions;\nexport const selectTeamsData = state => state.getTeams.fetchResult;\nexport const selectTeamsIsLoading = state => state.getTeams.isLoading;\nexport const selectTeamsError = state => state.getTeams.error;\nexport default getTeamsSlice.reducer;","map":{"version":3,"sources":["D:/study/dex-test/src/store/getTeamsSlice.ts"],"names":["createAsyncThunk","createSlice","initialState","isLoading","fetchResult","data","count","page","size","error","fetchTeamsAsync","request","console","log","myHeaders","Headers","Authorization","localStorage","getItem","requestOptions","method","headers","response","fetch","json","getTeamsSlice","name","reducers","reset","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","actions","selectTeamsData","getTeams","selectTeamsIsLoading","selectTeamsError","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AAIA,MAAMC,YAAoC,GAAG;AAC3CC,EAAAA,SAAS,EAAE,IADgC;AAE3CC,EAAAA,WAAW,EAAE;AACXC,IAAAA,IAAI,EAAE,EADK;AAEXC,IAAAA,KAAK,EAAE,CAFI;AAGXC,IAAAA,IAAI,EAAE,CAHK;AAIXC,IAAAA,IAAI,EAAE;AAJK,GAF8B;AAQ3CC,EAAAA,KAAK,EAAE;AARoC,CAA7C;AAWA,OAAO,MAAMC,eAAe,GAAGV,gBAAgB,CAC7C,iBAD6C,EAE7C,MAAOW,OAAP,IAAmB;AACjBC,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBF,OAAzB;AACA,QAAMG,SAAS,GAAG,IAAIC,OAAJ,CAAY;AAC5B,oBAAgB,kBADY;AAE5BC,IAAAA,aAAa,EAAG,UAASC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAA8B;AAF3B,GAAZ,CAAlB;AAIA,QAAMC,cAAc,GAAG;AACrBC,IAAAA,MAAM,EAAE,KADa;AAErBC,IAAAA,OAAO,EAAEP;AAFY,GAAvB;AAIA,QAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAACZ,OAAD,EAAUQ,cAAV,CAA5B;AACA,SAAQ,MAAMG,QAAQ,CAACE,IAAT,EAAd;AACD,CAd4C,CAAxC;AAiBP,OAAO,MAAMC,aAAa,GAAGxB,WAAW,CAAC;AACvCyB,EAAAA,IAAI,EAAE,UADiC;AAEvCxB,EAAAA,YAFuC;AAGvCyB,EAAAA,QAAQ,EAAE;AACRC,IAAAA,KAAK,EAAGC,KAAD,IAAW3B;AADV,GAH6B;AAMvC4B,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CAACC,OAAR,CAAgBtB,eAAe,CAACuB,OAAhC,EAA0CJ,KAAD,IAAW;AAClDA,MAAAA,KAAK,CAAC1B,SAAN,GAAkB,IAAlB;AACD,KAFD;AAGA4B,IAAAA,OAAO,CAACC,OAAR,CAAgBtB,eAAe,CAACwB,SAAhC,EAA2C,CAACL,KAAD,EAAQM,MAAR,KAAmB;AAC5DN,MAAAA,KAAK,CAAC1B,SAAN,GAAkB,KAAlB;AACA0B,MAAAA,KAAK,CAACzB,WAAN,GAAoB+B,MAAM,CAACC,OAA3B;AACD,KAHD;AAIAL,IAAAA,OAAO,CAACC,OAAR,CAAgBtB,eAAe,CAAC2B,QAAhC,EAA0C,CAACR,KAAD,EAAQM,MAAR,KAAmB;AAC3DN,MAAAA,KAAK,CAAC1B,SAAN,GAAkB,KAAlB;AACA0B,MAAAA,KAAK,CAACpB,KAAN,GAAc0B,MAAM,CAAC1B,KAArB;AACD,KAHD;AAID;AAlBsC,CAAD,CAAjC;AAqBP,OAAO,MAAM;AAAEmB,EAAAA;AAAF,IAAYH,aAAa,CAACa,OAAhC;AACP,OAAO,MAAMC,eAAe,GAAIV,KAAD,IAAsBA,KAAK,CAACW,QAAN,CAAepC,WAA7D;AACP,OAAO,MAAMqC,oBAAoB,GAAIZ,KAAD,IAClCA,KAAK,CAACW,QAAN,CAAerC,SADV;AAEP,OAAO,MAAMuC,gBAAgB,GAAIb,KAAD,IAAsBA,KAAK,CAACW,QAAN,CAAe/B,KAA9D;AAEP,eAAegB,aAAa,CAACkB,OAA7B","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport { TeamDtoPageResult, TeamDtoPageResultState } from \"../Interfaces\";\r\nimport { RootState } from \"./store\";\r\n\r\nconst initialState: TeamDtoPageResultState = {\r\n  isLoading: true,\r\n  fetchResult: {\r\n    data: [],\r\n    count: 0,\r\n    page: 1,\r\n    size: 6,\r\n  },\r\n  error: null,\r\n};\r\n\r\nexport const fetchTeamsAsync = createAsyncThunk<any, string>(\r\n  \"teams/fatchData\",\r\n  async (request) => {\r\n    console.log(\"request: \", request);\r\n    const myHeaders = new Headers({\r\n      \"Content-Type\": \"application/json\",\r\n      Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n    });\r\n    const requestOptions = {\r\n      method: \"GET\",\r\n      headers: myHeaders,\r\n    };\r\n    const response = await fetch(request, requestOptions);\r\n    return (await response.json()) as TeamDtoPageResult;\r\n  }\r\n);\r\n\r\nexport const getTeamsSlice = createSlice({\r\n  name: \"getTeams\",\r\n  initialState,\r\n  reducers: {\r\n    reset: (state) => initialState,\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(fetchTeamsAsync.pending, (state) => {\r\n      state.isLoading = true;\r\n    });\r\n    builder.addCase(fetchTeamsAsync.fulfilled, (state, action) => {\r\n      state.isLoading = false;\r\n      state.fetchResult = action.payload;\r\n    });\r\n    builder.addCase(fetchTeamsAsync.rejected, (state, action) => {\r\n      state.isLoading = false;\r\n      state.error = action.error;\r\n    });\r\n  },\r\n});\r\n\r\nexport const { reset } = getTeamsSlice.actions;\r\nexport const selectTeamsData = (state: RootState) => state.getTeams.fetchResult;\r\nexport const selectTeamsIsLoading = (state: RootState) =>\r\n  state.getTeams.isLoading;\r\nexport const selectTeamsError = (state: RootState) => state.getTeams.error;\r\n\r\nexport default getTeamsSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}